# Copyright 2019, Leonardo Mariscal & Zachary Carter.

## ImGUI Bindings
## ====
## This code was automatically generated by `nimgui<https://github.com/zacharycarter/nimgui>`_
##
## This bindings follow most of the original library
## You can check the original documentation `here <https://github.com/ocornut/imgui/blob/master/imgui.cpp>`_.
##
## Do to this library most of the binding libraries are written in C, we want
## to continue supporting only C libraries so you can always use the backend of
## your choice. We are binding `cimgui <https://github.com/cimgui/cimgui>`_
## which is a thin c wrapper of the c++ version. It is up to date and has great
## support.
##
## NOTE: Unless you want to compile witch cpp please provide a dll of the library,
## made with cimgui.
##
## Even tho we try to keep this bindings the closes to the source, this one specially
## needs some extra work to fully function with glfw, so there are some helper functions
## to help with the proccess
##
## HACK: If you are on windows be sure to compile the cimgui dll with visual studio and
## not with mingw.

import strutils

proc currentSourceDir(): string =
  result = currentSourcePath()
  result = result.replace("\\", "/")
  result = result[0 ..< result.rfind("/")]

when not defined(imguiSrc):
  when defined(windows):
    const imgui_dll* = "cimgui.dll"
  elif defined(macosx):
    const imgui_dll* = "cimgui.dylib"
  else:
    const imgui_dll* = "cimgui.so"
  {.pragma: imgui_lib, dynlib: imgui_dll, cdecl.}
  {.pragma: imgui_header, header: "cimgui.h".}
  {.passC: "-DCIMGUI_DEFINE_ENUMS_AND_STRUCTS".}
else:
  {.compile: "private/cimgui/cimgui.cpp",
    compile: "private/cimgui/imgui/imgui.cpp",
    compile: "private/cimgui/imgui/imgui_draw.cpp",
    compile: "private/cimgui/imgui/imgui_demo.cpp",
    compile: "private/cimgui/imgui/imgui_widgets.cpp".}
  {.pragma: imgui_lib, nodecl.}
  {.pragma: imgui_header, header: currentSourceDir() & "/nimgui/private/ncimgui.h".}

{.passC: "-I" & currentSourceDir() & "/../cimgui" & " -DIMGUI_DISABLE_OBSOLETE_FUNCTIONS=1".}

const
  ImDrawCornerFlags_TopLeft* = 1
  ImDrawCornerFlags_TopRight* = 2
  ImDrawCornerFlags_BotLeft* = 4
  ImDrawCornerFlags_BotRight* = 8
  ImDrawCornerFlags_Top* = 3
  ImDrawCornerFlags_Bot* = 12
  ImDrawCornerFlags_Left* = 5
  ImDrawCornerFlags_Right* = 10
  ImDrawCornerFlags_All* = 15
  ImDrawListFlags_None* = 0
  ImDrawListFlags_AntiAliasedLines* = 1
  ImDrawListFlags_AntiAliasedFill* = 2
  ImFontAtlasFlags_None* = 0
  ImFontAtlasFlags_NoPowerOfTwoHeight* = 1
  ImFontAtlasFlags_NoMouseCursors* = 2
  ImGuiBackendFlags_None* = 0
  ImGuiBackendFlags_HasGamepad* = 1
  ImGuiBackendFlags_HasMouseCursors* = 2
  ImGuiBackendFlags_HasSetMousePos* = 4
  ImGuiCol_Text* = 0
  ImGuiCol_TextDisabled* = 1
  ImGuiCol_WindowBg* = 2
  ImGuiCol_ChildBg* = 3
  ImGuiCol_PopupBg* = 4
  ImGuiCol_Border* = 5
  ImGuiCol_BorderShadow* = 6
  ImGuiCol_FrameBg* = 7
  ImGuiCol_FrameBgHovered* = 8
  ImGuiCol_FrameBgActive* = 9
  ImGuiCol_TitleBg* = 10
  ImGuiCol_TitleBgActive* = 11
  ImGuiCol_TitleBgCollapsed* = 12
  ImGuiCol_MenuBarBg* = 13
  ImGuiCol_ScrollbarBg* = 14
  ImGuiCol_ScrollbarGrab* = 15
  ImGuiCol_ScrollbarGrabHovered* = 16
  ImGuiCol_ScrollbarGrabActive* = 17
  ImGuiCol_CheckMark* = 18
  ImGuiCol_SliderGrab* = 19
  ImGuiCol_SliderGrabActive* = 20
  ImGuiCol_Button* = 21
  ImGuiCol_ButtonHovered* = 22
  ImGuiCol_ButtonActive* = 23
  ImGuiCol_Header* = 24
  ImGuiCol_HeaderHovered* = 25
  ImGuiCol_HeaderActive* = 26
  ImGuiCol_Separator* = 27
  ImGuiCol_SeparatorHovered* = 28
  ImGuiCol_SeparatorActive* = 29
  ImGuiCol_ResizeGrip* = 30
  ImGuiCol_ResizeGripHovered* = 31
  ImGuiCol_ResizeGripActive* = 32
  ImGuiCol_Tab* = 33
  ImGuiCol_TabHovered* = 34
  ImGuiCol_TabActive* = 35
  ImGuiCol_TabUnfocused* = 36
  ImGuiCol_TabUnfocusedActive* = 37
  ImGuiCol_PlotLines* = 38
  ImGuiCol_PlotLinesHovered* = 39
  ImGuiCol_PlotHistogram* = 40
  ImGuiCol_PlotHistogramHovered* = 41
  ImGuiCol_TextSelectedBg* = 42
  ImGuiCol_DragDropTarget* = 43
  ImGuiCol_NavHighlight* = 44
  ImGuiCol_NavWindowingHighlight* = 45
  ImGuiCol_NavWindowingDimBg* = 46
  ImGuiCol_ModalWindowDimBg* = 47
  ImGuiCol_COUNT* = 48
  ImGuiColorEditFlags_None* = 0
  ImGuiColorEditFlags_NoAlpha* = 2
  ImGuiColorEditFlags_NoPicker* = 4
  ImGuiColorEditFlags_NoOptions* = 8
  ImGuiColorEditFlags_NoSmallPreview* = 16
  ImGuiColorEditFlags_NoInputs* = 32
  ImGuiColorEditFlags_NoTooltip* = 64
  ImGuiColorEditFlags_NoLabel* = 128
  ImGuiColorEditFlags_NoSidePreview* = 256
  ImGuiColorEditFlags_NoDragDrop* = 512
  ImGuiColorEditFlags_AlphaBar* = 65536
  ImGuiColorEditFlags_AlphaPreview* = 131072
  ImGuiColorEditFlags_AlphaPreviewHalf* = 262144
  ImGuiColorEditFlags_HDR* = 524288
  ImGuiColorEditFlags_DisplayRGB* = 1048576
  ImGuiColorEditFlags_DisplayHSV* = 2097152
  ImGuiColorEditFlags_DisplayHex* = 4194304
  ImGuiColorEditFlags_Uint8* = 8388608
  ImGuiColorEditFlags_Float* = 16777216
  ImGuiColorEditFlags_PickerHueBar* = 33554432
  ImGuiColorEditFlags_PickerHueWheel* = 67108864
  ImGuiColorEditFlags_InputRGB* = 134217728
  ImGuiColorEditFlags_InputHSV* = 268435456
  ImGuiColorEditFlags_OptionsDefault* = 177209344
  ImGuiColorEditFlags_DisplayMask* = 7340032
  ImGuiColorEditFlags_DataTypeMask* = 25165824
  ImGuiColorEditFlags_PickerMask* = 100663296
  ImGuiColorEditFlags_InputMask* = 402653184
  ImGuiComboFlags_None* = 0
  ImGuiComboFlags_PopupAlignLeft* = 1
  ImGuiComboFlags_HeightSmall* = 2
  ImGuiComboFlags_HeightRegular* = 4
  ImGuiComboFlags_HeightLarge* = 8
  ImGuiComboFlags_HeightLargest* = 16
  ImGuiComboFlags_NoArrowButton* = 32
  ImGuiComboFlags_NoPreview* = 64
  ImGuiComboFlags_HeightMask* = 30
  ImGuiCond_Always* = 1
  ImGuiCond_Once* = 2
  ImGuiCond_FirstUseEver* = 4
  ImGuiCond_Appearing* = 8
  ImGuiConfigFlags_None* = 0
  ImGuiConfigFlags_NavEnableKeyboard* = 1
  ImGuiConfigFlags_NavEnableGamepad* = 2
  ImGuiConfigFlags_NavEnableSetMousePos* = 4
  ImGuiConfigFlags_NavNoCaptureKeyboard* = 8
  ImGuiConfigFlags_NoMouse* = 16
  ImGuiConfigFlags_NoMouseCursorChange* = 32
  ImGuiConfigFlags_IsSRGB* = 1048576
  ImGuiConfigFlags_IsTouchScreen* = 2097152
  ImGuiDataType_S8* = 0
  ImGuiDataType_U8* = 1
  ImGuiDataType_S16* = 2
  ImGuiDataType_U16* = 3
  ImGuiDataType_S32* = 4
  ImGuiDataType_U32* = 5
  ImGuiDataType_S64* = 6
  ImGuiDataType_U64* = 7
  ImGuiDataType_Float* = 8
  ImGuiDataType_Double* = 9
  ImGuiDataType_COUNT* = 10
  ImGuiDir_None* = -1
  ImGuiDir_Left* = 0
  ImGuiDir_Right* = 1
  ImGuiDir_Up* = 2
  ImGuiDir_Down* = 3
  ImGuiDir_COUNT* = 4
  ImGuiDragDropFlags_None* = 0
  ImGuiDragDropFlags_SourceNoPreviewTooltip* = 1
  ImGuiDragDropFlags_SourceNoDisableHover* = 2
  ImGuiDragDropFlags_SourceNoHoldToOpenOthers* = 4
  ImGuiDragDropFlags_SourceAllowNullID* = 8
  ImGuiDragDropFlags_SourceExtern* = 16
  ImGuiDragDropFlags_SourceAutoExpirePayload* = 32
  ImGuiDragDropFlags_AcceptBeforeDelivery* = 1024
  ImGuiDragDropFlags_AcceptNoDrawDefaultRect* = 2048
  ImGuiDragDropFlags_AcceptNoPreviewTooltip* = 4096
  ImGuiDragDropFlags_AcceptPeekOnly* = 3072
  ImGuiFocusedFlags_None* = 0
  ImGuiFocusedFlags_ChildWindows* = 1
  ImGuiFocusedFlags_RootWindow* = 2
  ImGuiFocusedFlags_AnyWindow* = 4
  ImGuiFocusedFlags_RootAndChildWindows* = 3
  ImGuiHoveredFlags_None* = 0
  ImGuiHoveredFlags_ChildWindows* = 1
  ImGuiHoveredFlags_RootWindow* = 2
  ImGuiHoveredFlags_AnyWindow* = 4
  ImGuiHoveredFlags_AllowWhenBlockedByPopup* = 8
  ImGuiHoveredFlags_AllowWhenBlockedByActiveItem* = 32
  ImGuiHoveredFlags_AllowWhenOverlapped* = 64
  ImGuiHoveredFlags_AllowWhenDisabled* = 128
  ImGuiHoveredFlags_RectOnly* = 104
  ImGuiHoveredFlags_RootAndChildWindows* = 3
  ImGuiInputTextFlags_None* = 0
  ImGuiInputTextFlags_CharsDecimal* = 1
  ImGuiInputTextFlags_CharsHexadecimal* = 2
  ImGuiInputTextFlags_CharsUppercase* = 4
  ImGuiInputTextFlags_CharsNoBlank* = 8
  ImGuiInputTextFlags_AutoSelectAll* = 16
  ImGuiInputTextFlags_EnterReturnsTrue* = 32
  ImGuiInputTextFlags_CallbackCompletion* = 64
  ImGuiInputTextFlags_CallbackHistory* = 128
  ImGuiInputTextFlags_CallbackAlways* = 256
  ImGuiInputTextFlags_CallbackCharFilter* = 512
  ImGuiInputTextFlags_AllowTabInput* = 1024
  ImGuiInputTextFlags_CtrlEnterForNewLine* = 2048
  ImGuiInputTextFlags_NoHorizontalScroll* = 4096
  ImGuiInputTextFlags_AlwaysInsertMode* = 8192
  ImGuiInputTextFlags_ReadOnly* = 16384
  ImGuiInputTextFlags_Password* = 32768
  ImGuiInputTextFlags_NoUndoRedo* = 65536
  ImGuiInputTextFlags_CharsScientific* = 131072
  ImGuiInputTextFlags_CallbackResize* = 262144
  ImGuiInputTextFlags_Multiline* = 1048576
  ImGuiKey_Tab* = 0
  ImGuiKey_LeftArrow* = 1
  ImGuiKey_RightArrow* = 2
  ImGuiKey_UpArrow* = 3
  ImGuiKey_DownArrow* = 4
  ImGuiKey_PageUp* = 5
  ImGuiKey_PageDown* = 6
  ImGuiKey_Home* = 7
  ImGuiKey_End* = 8
  ImGuiKey_Insert* = 9
  ImGuiKey_Delete* = 10
  ImGuiKey_Backspace* = 11
  ImGuiKey_Space* = 12
  ImGuiKey_Enter* = 13
  ImGuiKey_Escape* = 14
  ImGuiKey_A* = 15
  ImGuiKey_C* = 16
  ImGuiKey_V* = 17
  ImGuiKey_X* = 18
  ImGuiKey_Y* = 19
  ImGuiKey_Z* = 20
  ImGuiKey_COUNT* = 21
  ImGuiMouseCursor_None* = -1
  ImGuiMouseCursor_Arrow* = 0
  ImGuiMouseCursor_TextInput* = 1
  ImGuiMouseCursor_ResizeAll* = 2
  ImGuiMouseCursor_ResizeNS* = 3
  ImGuiMouseCursor_ResizeEW* = 4
  ImGuiMouseCursor_ResizeNESW* = 5
  ImGuiMouseCursor_ResizeNWSE* = 6
  ImGuiMouseCursor_Hand* = 7
  ImGuiMouseCursor_COUNT* = 8
  ImGuiNavInput_Activate* = 0
  ImGuiNavInput_Cancel* = 1
  ImGuiNavInput_Input* = 2
  ImGuiNavInput_Menu* = 3
  ImGuiNavInput_DpadLeft* = 4
  ImGuiNavInput_DpadRight* = 5
  ImGuiNavInput_DpadUp* = 6
  ImGuiNavInput_DpadDown* = 7
  ImGuiNavInput_LStickLeft* = 8
  ImGuiNavInput_LStickRight* = 9
  ImGuiNavInput_LStickUp* = 10
  ImGuiNavInput_LStickDown* = 11
  ImGuiNavInput_FocusPrev* = 12
  ImGuiNavInput_FocusNext* = 13
  ImGuiNavInput_TweakSlow* = 14
  ImGuiNavInput_TweakFast* = 15
  ImGuiNavInput_KeyMenu* = 16
  ImGuiNavInput_KeyTab* = 17
  ImGuiNavInput_KeyLeft* = 18
  ImGuiNavInput_KeyRight* = 19
  ImGuiNavInput_KeyUp* = 20
  ImGuiNavInput_KeyDown* = 21
  ImGuiNavInput_COUNT* = 22
  ImGuiNavInput_InternalStart* = 16
  ImGuiSelectableFlags_None* = 0
  ImGuiSelectableFlags_DontClosePopups* = 1
  ImGuiSelectableFlags_SpanAllColumns* = 2
  ImGuiSelectableFlags_AllowDoubleClick* = 4
  ImGuiSelectableFlags_Disabled* = 8
  ImGuiStyleVar_Alpha* = 0
  ImGuiStyleVar_WindowPadding* = 1
  ImGuiStyleVar_WindowRounding* = 2
  ImGuiStyleVar_WindowBorderSize* = 3
  ImGuiStyleVar_WindowMinSize* = 4
  ImGuiStyleVar_WindowTitleAlign* = 5
  ImGuiStyleVar_ChildRounding* = 6
  ImGuiStyleVar_ChildBorderSize* = 7
  ImGuiStyleVar_PopupRounding* = 8
  ImGuiStyleVar_PopupBorderSize* = 9
  ImGuiStyleVar_FramePadding* = 10
  ImGuiStyleVar_FrameRounding* = 11
  ImGuiStyleVar_FrameBorderSize* = 12
  ImGuiStyleVar_ItemSpacing* = 13
  ImGuiStyleVar_ItemInnerSpacing* = 14
  ImGuiStyleVar_IndentSpacing* = 15
  ImGuiStyleVar_ScrollbarSize* = 16
  ImGuiStyleVar_ScrollbarRounding* = 17
  ImGuiStyleVar_GrabMinSize* = 18
  ImGuiStyleVar_GrabRounding* = 19
  ImGuiStyleVar_TabRounding* = 20
  ImGuiStyleVar_ButtonTextAlign* = 21
  ImGuiStyleVar_SelectableTextAlign* = 22
  ImGuiStyleVar_COUNT* = 23
  ImGuiTabBarFlags_None* = 0
  ImGuiTabBarFlags_Reorderable* = 1
  ImGuiTabBarFlags_AutoSelectNewTabs* = 2
  ImGuiTabBarFlags_TabListPopupButton* = 4
  ImGuiTabBarFlags_NoCloseWithMiddleMouseButton* = 8
  ImGuiTabBarFlags_NoTabListScrollingButtons* = 16
  ImGuiTabBarFlags_NoTooltip* = 32
  ImGuiTabBarFlags_FittingPolicyResizeDown* = 64
  ImGuiTabBarFlags_FittingPolicyScroll* = 128
  ImGuiTabBarFlags_FittingPolicyMask* = 192
  ImGuiTabBarFlags_FittingPolicyDefault* = 64
  ImGuiTabItemFlags_None* = 0
  ImGuiTabItemFlags_UnsavedDocument* = 1
  ImGuiTabItemFlags_SetSelected* = 2
  ImGuiTabItemFlags_NoCloseWithMiddleMouseButton* = 4
  ImGuiTabItemFlags_NoPushId* = 8
  ImGuiTreeNodeFlags_None* = 0
  ImGuiTreeNodeFlags_Selected* = 1
  ImGuiTreeNodeFlags_Framed* = 2
  ImGuiTreeNodeFlags_AllowItemOverlap* = 4
  ImGuiTreeNodeFlags_NoTreePushOnOpen* = 8
  ImGuiTreeNodeFlags_NoAutoOpenOnLog* = 16
  ImGuiTreeNodeFlags_DefaultOpen* = 32
  ImGuiTreeNodeFlags_OpenOnDoubleClick* = 64
  ImGuiTreeNodeFlags_OpenOnArrow* = 128
  ImGuiTreeNodeFlags_Leaf* = 256
  ImGuiTreeNodeFlags_Bullet* = 512
  ImGuiTreeNodeFlags_FramePadding* = 1024
  ImGuiTreeNodeFlags_NavLeftJumpsBackHere* = 8192
  ImGuiTreeNodeFlags_CollapsingHeader* = 26
  ImGuiWindowFlags_None* = 0
  ImGuiWindowFlags_NoTitleBar* = 1
  ImGuiWindowFlags_NoResize* = 2
  ImGuiWindowFlags_NoMove* = 4
  ImGuiWindowFlags_NoScrollbar* = 8
  ImGuiWindowFlags_NoScrollWithMouse* = 16
  ImGuiWindowFlags_NoCollapse* = 32
  ImGuiWindowFlags_AlwaysAutoResize* = 64
  ImGuiWindowFlags_NoBackground* = 128
  ImGuiWindowFlags_NoSavedSettings* = 256
  ImGuiWindowFlags_NoMouseInputs* = 512
  ImGuiWindowFlags_MenuBar* = 1024
  ImGuiWindowFlags_HorizontalScrollbar* = 2048
  ImGuiWindowFlags_NoFocusOnAppearing* = 4096
  ImGuiWindowFlags_NoBringToFrontOnFocus* = 8192
  ImGuiWindowFlags_AlwaysVerticalScrollbar* = 16384
  ImGuiWindowFlags_AlwaysHorizontalScrollbar* = 32768
  ImGuiWindowFlags_AlwaysUseWindowPadding* = 65536
  ImGuiWindowFlags_NoNavInputs* = 262144
  ImGuiWindowFlags_NoNavFocus* = 524288
  ImGuiWindowFlags_UnsavedDocument* = 1048576
  ImGuiWindowFlags_NoNav* = 786432
  ImGuiWindowFlags_NoDecoration* = 43
  ImGuiWindowFlags_NoInputs* = 786944
  ImGuiWindowFlags_NavFlattened* = 8388608
  ImGuiWindowFlags_ChildWindow* = 16777216
  ImGuiWindowFlags_Tooltip* = 33554432
  ImGuiWindowFlags_Popup* = 67108864
  ImGuiWindowFlags_Modal* = 134217728
  ImGuiWindowFlags_ChildMenu* = 268435456

type
  ImDrawCallback* = proc(parent_list: ptr ImDrawList, cmd: ptr ImDrawCmd): void {.cdecl.}
  ImDrawCornerFlags* = int32
  ImDrawIdx* = uint16
  ImDrawListFlags* = int32
  ImFontAtlasFlags* = int32
  ImGuiBackendFlags* = int32
  ImGuiCol* = int32
  ImGuiColorEditFlags* = int32
  ImGuiColumnsFlags* = int32
  ImGuiComboFlags* = int32
  ImGuiCond* = int32
  ImGuiConfigFlags* = int32
  ImGuiDataType* = int32
  ImGuiDir* = int32
  ImGuiDragDropFlags* = int32
  ImGuiFocusedFlags* = int32
  ImGuiHoveredFlags* = int32
  ImGuiID* = uint32
  ImGuiInputTextCallback* = proc(data: ptr ImGuiInputTextCallbackData): int32 {.cdecl.}
  ImGuiInputTextFlags* = int32
  ImGuiKey* = int32
  ImGuiMouseCursor* = int32
  ImGuiNavInput* = int32
  ImGuiSelectableFlags* = int32
  ImGuiSizeCallback* = proc(data: ptr ImGuiSizeCallbackData): void {.cdecl.}
  ImGuiStyleVar* = int32
  ImGuiTabBarFlags* = int32
  ImGuiTabItemFlags* = int32
  ImGuiTreeNodeFlags* = int32
  ImGuiWindowFlags* = int32
  ImS16* = int16
  ImS32* = int32
  ImS64* = int64
  ImS8* = char
  ImTextureID* = pointer
  ImU16* = uint16
  ImU32* = uint32
  ImU64* = uint64
  ImU8* = char
  ImWchar* = uint16

  carray*[T] = UncheckedArray[T]
  ImDrawData* {.importc: "ImDrawData", imgui_header.} = object
    valid* {.importc: "Valid".} : bool
    cmdLists* {.importc: "CmdLists".} : carray[ptr ImDrawList]
    cmdListsCount* {.importc: "CmdListsCount".} : int32
    totalIdxCount* {.importc: "TotalIdxCount".} : int32
    totalVtxCount* {.importc: "TotalVtxCount".} : int32
    displayPos* {.importc: "DisplayPos".} : ImVec2
    displaySize* {.importc: "DisplaySize".} : ImVec2
  Pair* {.importc: "Pair", imgui_header.} = object
    key*: ImGuiID
    val*: int32
  ImVector* {.importc: "ImVector", imgui_header.} = object
    size* {.importc: "Size".}: int32
    capacity* {.importc: "Capacity".}: int32
    data* {.importc: "Data".}: carray[pointer]
  ImVector_float* {.importc: "ImVector_float", imgui_header.} = object
    size* {.importc: "Size".}: int32
    capacity* {.importc: "Capacity".}: int32
    data* {.importc: "Data".}: carray[float32]
  ImVector_int* {.importc: "ImVector_int", imgui_header.} = object
    size* {.importc: "Size".}: int32
    capacity* {.importc: "Capacity".}: int32
    data* {.importc: "Data".}: carray[int32]
  ImVector_ImWchar* {.importc: "ImVector_ImWchar", imgui_header.} = object
    size* {.importc: "Size".}: int32
    capacity* {.importc: "Capacity".}: int32
    data* {.importc: "Data".}: carray[ImWchar]
  ImVector_ImFontConfig* {.importc: "ImVector_ImFontConfig", imgui_header.} = object
    size* {.importc: "Size".}: int32
    capacity* {.importc: "Capacity".}: int32
    data* {.importc: "Data".}: carray[ImFontConfig]
  ImVector_ImFontGlyph* {.importc: "ImVector_ImFontGlyph", imgui_header.} = object
    size* {.importc: "Size".}: int32
    capacity* {.importc: "Capacity".}: int32
    data* {.importc: "Data".}: carray[ImFontGlyph]
  ImVector_unsigned_char* {.importc: "ImVector_unsigned_char", imgui_header.} = object
    size* {.importc: "Size".}: int32
    capacity* {.importc: "Capacity".}: int32
    data* {.importc: "Data".}: carray[cuchar]
  ImVector_Pair* {.importc: "ImVector_Pair", imgui_header.} = object
    size* {.importc: "Size".}: int32
    capacity* {.importc: "Capacity".}: int32
    data* {.importc: "Data".}: carray[Pair]
  ImVector_CustomRect* {.importc: "ImVector_CustomRect", imgui_header.} = object
    size* {.importc: "Size".}: int32
    capacity* {.importc: "Capacity".}: int32
    data* {.importc: "Data".}: carray[CustomRect]
  ImVector_ImDrawChannel* {.importc: "ImVector_ImDrawChannel", imgui_header.} = object
    size* {.importc: "Size".}: int32
    capacity* {.importc: "Capacity".}: int32
    data* {.importc: "Data".}: carray[ImDrawChannel]
  ImVector_char* {.importc: "ImVector_char", imgui_header.} = object
    size* {.importc: "Size".}: int32
    capacity* {.importc: "Capacity".}: int32
    data* {.importc: "Data".}: carray[char]
  ImVector_ImTextureID* {.importc: "ImVector_ImTextureID", imgui_header.} = object
    size* {.importc: "Size".}: int32
    capacity* {.importc: "Capacity".}: int32
    data* {.importc: "Data".}: carray[ImTextureID]
  ImVector_unsigned_short* {.importc: "ImVector_unsigned_short", imgui_header.} = object
    size* {.importc: "Size".}: int32
    capacity* {.importc: "Capacity".}: int32
    data* {.importc: "Data".}: carray[cushort]
  ImVector_ImDrawVert* {.importc: "ImVector_ImDrawVert", imgui_header.} = object
    size* {.importc: "Size".}: int32
    capacity* {.importc: "Capacity".}: int32
    data* {.importc: "Data".}: carray[ImDrawVert]
  ImVector_ImDrawCmd* {.importc: "ImVector_ImDrawCmd", imgui_header.} = object
    size* {.importc: "Size".}: int32
    capacity* {.importc: "Capacity".}: int32
    data* {.importc: "Data".}: carray[ImDrawCmd]
  ImVector_TextRange* {.importc: "ImVector_TextRange", imgui_header.} = object
    size* {.importc: "Size".}: int32
    capacity* {.importc: "Capacity".}: int32
    data* {.importc: "Data".}: carray[TextRange]
  ImVector_ImVec4* {.importc: "ImVector_ImVec4", imgui_header.} = object
    size* {.importc: "Size".}: int32
    capacity* {.importc: "Capacity".}: int32
    data* {.importc: "Data".}: carray[ImVec4]
  ImVector_ImDrawIdx* {.importc: "ImVector_ImDrawIdx", imgui_header.} = object
    size* {.importc: "Size".}: int32
    capacity* {.importc: "Capacity".}: int32
    data* {.importc: "Data".}: carray[ImDrawIdx]
  ImVector_ImVec2* {.importc: "ImVector_ImVec2", imgui_header.} = object
    size* {.importc: "Size".}: int32
    capacity* {.importc: "Capacity".}: int32
    data* {.importc: "Data".}: carray[ImVec2]
  ImVector_ImFontPtr* {.importc: "ImVector_ImFontPtr", imgui_header.} = object
    size* {.importc: "Size".}: int32
    capacity* {.importc: "Capacity".}: int32
    data* {.importc: "Data".}: carray[ptr ImFont]
  ImDrawListSharedData* {.importc: "ImDrawListSharedData", imgui_header.} = object
  ImGuiContext* {.importc: "ImGuiContext", imgui_header.} = object
  igGLFWwindow* = object
  igSDL_Window* = object
  igSDL_Event* = object
  CustomRect* {.importc: "CustomRect", imgui_header.} = object
    iD* {.importc: "ID".} : uint32
    width* {.importc: "Width".} : uint16
    height* {.importc: "Height".} : uint16
    x* {.importc: "X".} : uint16
    y* {.importc: "Y".} : uint16
    glyphAdvanceX* {.importc: "GlyphAdvanceX".} : float32
    glyphOffset* {.importc: "GlyphOffset".} : ImVec2
    font* {.importc: "Font".} : ptr ImFont
  ImColor* {.importc: "ImColor", imgui_header.} = object
    value* {.importc: "Value".} : ImVec4
  ImDrawChannel* {.importc: "ImDrawChannel", imgui_header.} = object
    cmdBuffer* {.importc: "CmdBuffer".} : ImVector_ImDrawCmd
    idxBuffer* {.importc: "IdxBuffer".} : ImVector_ImDrawIdx
  ImDrawCmd* {.importc: "ImDrawCmd", imgui_header.} = object
    elemCount* {.importc: "ElemCount".} : uint32
    clipRect* {.importc: "ClipRect".} : ImVec4
    textureId* {.importc: "TextureId".} : ImTextureID
    userCallback* {.importc: "UserCallback".} : ImDrawCallback
    userCallbackData* {.importc: "UserCallbackData".} : pointer
  ImDrawList* {.importc: "ImDrawList", imgui_header.} = object
    cmdBuffer* {.importc: "CmdBuffer".} : ImVector_ImDrawCmd
    idxBuffer* {.importc: "IdxBuffer".} : ImVector_ImDrawIdx
    vtxBuffer* {.importc: "VtxBuffer".} : ImVector_ImDrawVert
    flags* {.importc: "Flags".} : ImDrawListFlags
    data* {.importc: "_Data".} : ptr ImDrawListSharedData
    ownerName* {.importc: "_OwnerName".} : cstring
    vtxCurrentIdx* {.importc: "_VtxCurrentIdx".} : uint32
    vtxWritePtr* {.importc: "_VtxWritePtr".} : ptr ImDrawVert
    idxWritePtr* {.importc: "_IdxWritePtr".} : ptr ImDrawIdx
    clipRectStack* {.importc: "_ClipRectStack".} : ImVector_ImVec4
    textureIdStack* {.importc: "_TextureIdStack".} : ImVector_ImTextureID
    path* {.importc: "_Path".} : ImVector_ImVec2
    channelsCurrent* {.importc: "_ChannelsCurrent".} : int32
    channelsCount* {.importc: "_ChannelsCount".} : int32
    channels* {.importc: "_Channels".} : ImVector_ImDrawChannel
  ImDrawVert* {.importc: "ImDrawVert", imgui_header.} = object
    pos* {.importc: "pos".} : ImVec2
    uv* {.importc: "uv".} : ImVec2
    col* {.importc: "col".} : ImU32
  ImFont* {.importc: "ImFont", imgui_header.} = object
    indexAdvanceX* {.importc: "IndexAdvanceX".} : ImVector_float
    fallbackAdvanceX* {.importc: "FallbackAdvanceX".} : float32
    fontSize* {.importc: "FontSize".} : float32
    indexLookup* {.importc: "IndexLookup".} : ImVector_ImWchar
    glyphs* {.importc: "Glyphs".} : ImVector_ImFontGlyph
    fallbackGlyph* {.importc: "FallbackGlyph".} : ptr ImFontGlyph
    displayOffset* {.importc: "DisplayOffset".} : ImVec2
    containerAtlas* {.importc: "ContainerAtlas".} : ptr ImFontAtlas
    configData* {.importc: "ConfigData".} : ptr ImFontConfig
    configDataCount* {.importc: "ConfigDataCount".} : int16
    fallbackChar* {.importc: "FallbackChar".} : ImWchar
    scale* {.importc: "Scale".} : float32
    ascent* {.importc: "Ascent".} : float32
    descent* {.importc: "Descent".} : float32
    metricsTotalSurface* {.importc: "MetricsTotalSurface".} : int32
    dirtyLookupTables* {.importc: "DirtyLookupTables".} : bool
  ImFontAtlas* {.importc: "ImFontAtlas", imgui_header.} = object
    locked* {.importc: "Locked".} : bool
    flags* {.importc: "Flags".} : ImFontAtlasFlags
    texID* {.importc: "TexID".} : ImTextureID
    texDesiredWidth* {.importc: "TexDesiredWidth".} : int32
    texGlyphPadding* {.importc: "TexGlyphPadding".} : int32
    texPixelsAlpha8* {.importc: "TexPixelsAlpha8".} : cstring
    texPixelsRGBA32* {.importc: "TexPixelsRGBA32".} : ptr uint32
    texWidth* {.importc: "TexWidth".} : int32
    texHeight* {.importc: "TexHeight".} : int32
    texUvScale* {.importc: "TexUvScale".} : ImVec2
    texUvWhitePixel* {.importc: "TexUvWhitePixel".} : ImVec2
    fonts* {.importc: "Fonts".} : ImVector_ImFontPtr
    customRects* {.importc: "CustomRects".} : ImVector_CustomRect
    configData* {.importc: "ConfigData".} : ImVector_ImFontConfig
    customRectIds* {.importc: "CustomRectIds".} : array[1, int32]
  ImFontConfig* {.importc: "ImFontConfig", imgui_header.} = object
    fontData* {.importc: "FontData".} : pointer
    fontDataSize* {.importc: "FontDataSize".} : int32
    fontDataOwnedByAtlas* {.importc: "FontDataOwnedByAtlas".} : bool
    fontNo* {.importc: "FontNo".} : int32
    sizePixels* {.importc: "SizePixels".} : float32
    oversampleH* {.importc: "OversampleH".} : int32
    oversampleV* {.importc: "OversampleV".} : int32
    pixelSnapH* {.importc: "PixelSnapH".} : bool
    glyphExtraSpacing* {.importc: "GlyphExtraSpacing".} : ImVec2
    glyphOffset* {.importc: "GlyphOffset".} : ImVec2
    glyphRanges* {.importc: "GlyphRanges".} : ptr ImWchar
    glyphMinAdvanceX* {.importc: "GlyphMinAdvanceX".} : float32
    glyphMaxAdvanceX* {.importc: "GlyphMaxAdvanceX".} : float32
    mergeMode* {.importc: "MergeMode".} : bool
    rasterizerFlags* {.importc: "RasterizerFlags".} : uint32
    rasterizerMultiply* {.importc: "RasterizerMultiply".} : float32
    name* {.importc: "Name".} : array[40, char]
    dstFont* {.importc: "DstFont".} : ptr ImFont
  ImFontGlyph* {.importc: "ImFontGlyph", imgui_header.} = object
    codepoint* {.importc: "Codepoint".} : ImWchar
    advanceX* {.importc: "AdvanceX".} : float32
    x0* {.importc: "X0".} : float32
    y0* {.importc: "Y0".} : float32
    x1* {.importc: "X1".} : float32
    y1* {.importc: "Y1".} : float32
    u0* {.importc: "U0".} : float32
    v0* {.importc: "V0".} : float32
    u1* {.importc: "U1".} : float32
    v1* {.importc: "V1".} : float32
  ImFontGlyphRangesBuilder* {.importc: "ImFontGlyphRangesBuilder", imgui_header.} = object
    usedChars* {.importc: "UsedChars".} : ImVector_int
  ImGuiIO* {.importc: "ImGuiIO", imgui_header.} = object
    configFlags* {.importc: "ConfigFlags".} : ImGuiConfigFlags
    backendFlags* {.importc: "BackendFlags".} : ImGuiBackendFlags
    displaySize* {.importc: "DisplaySize".} : ImVec2
    deltaTime* {.importc: "DeltaTime".} : float32
    iniSavingRate* {.importc: "IniSavingRate".} : float32
    iniFilename* {.importc: "IniFilename".} : cstring
    logFilename* {.importc: "LogFilename".} : cstring
    mouseDoubleClickTime* {.importc: "MouseDoubleClickTime".} : float32
    mouseDoubleClickMaxDist* {.importc: "MouseDoubleClickMaxDist".} : float32
    mouseDragThreshold* {.importc: "MouseDragThreshold".} : float32
    keyMap* {.importc: "KeyMap".} : array[ImGuiKey_COUNT, int32]
    keyRepeatDelay* {.importc: "KeyRepeatDelay".} : float32
    keyRepeatRate* {.importc: "KeyRepeatRate".} : float32
    userData* {.importc: "UserData".} : pointer
    fonts* {.importc: "Fonts".} : ptr ImFontAtlas
    fontGlobalScale* {.importc: "FontGlobalScale".} : float32
    fontAllowUserScaling* {.importc: "FontAllowUserScaling".} : bool
    fontDefault* {.importc: "FontDefault".} : ptr ImFont
    displayFramebufferScale* {.importc: "DisplayFramebufferScale".} : ImVec2
    mouseDrawCursor* {.importc: "MouseDrawCursor".} : bool
    configMacOSXBehaviors* {.importc: "ConfigMacOSXBehaviors".} : bool
    configInputTextCursorBlink* {.importc: "ConfigInputTextCursorBlink".} : bool
    configWindowsResizeFromEdges* {.importc: "ConfigWindowsResizeFromEdges".} : bool
    configWindowsMoveFromTitleBarOnly* {.importc: "ConfigWindowsMoveFromTitleBarOnly".} : bool
    backendPlatformName* {.importc: "BackendPlatformName".} : cstring
    backendRendererName* {.importc: "BackendRendererName".} : cstring
    backendPlatformUserData* {.importc: "BackendPlatformUserData".} : pointer
    backendRendererUserData* {.importc: "BackendRendererUserData".} : pointer
    backendLanguageUserData* {.importc: "BackendLanguageUserData".} : pointer
    getClipboardTextFn* {.importc: "GetClipboardTextFn".} : proc(user_data: pointer): cstring {.cdecl.}
    setClipboardTextFn* {.importc: "SetClipboardTextFn".} : proc(user_data: pointer, text: cstring): void {.cdecl.}
    clipboardUserData* {.importc: "ClipboardUserData".} : pointer
    imeSetInputScreenPosFn* {.importc: "ImeSetInputScreenPosFn".} : proc(x: int32, y: int32): void {.cdecl.}
    imeWindowHandle* {.importc: "ImeWindowHandle".} : pointer
    renderDrawListsFnUnused* {.importc: "RenderDrawListsFnUnused".} : pointer
    mousePos* {.importc: "MousePos".} : ImVec2
    mouseDown* {.importc: "MouseDown".} : array[5, bool]
    mouseWheel* {.importc: "MouseWheel".} : float32
    mouseWheelH* {.importc: "MouseWheelH".} : float32
    keyCtrl* {.importc: "KeyCtrl".} : bool
    keyShift* {.importc: "KeyShift".} : bool
    keyAlt* {.importc: "KeyAlt".} : bool
    keySuper* {.importc: "KeySuper".} : bool
    keysDown* {.importc: "KeysDown".} : array[512, bool]
    navInputs* {.importc: "NavInputs".} : array[ImGuiNavInput_COUNT, float32]
    wantCaptureMouse* {.importc: "WantCaptureMouse".} : bool
    wantCaptureKeyboard* {.importc: "WantCaptureKeyboard".} : bool
    wantTextInput* {.importc: "WantTextInput".} : bool
    wantSetMousePos* {.importc: "WantSetMousePos".} : bool
    wantSaveIniSettings* {.importc: "WantSaveIniSettings".} : bool
    navActive* {.importc: "NavActive".} : bool
    navVisible* {.importc: "NavVisible".} : bool
    framerate* {.importc: "Framerate".} : float32
    metricsRenderVertices* {.importc: "MetricsRenderVertices".} : int32
    metricsRenderIndices* {.importc: "MetricsRenderIndices".} : int32
    metricsRenderWindows* {.importc: "MetricsRenderWindows".} : int32
    metricsActiveWindows* {.importc: "MetricsActiveWindows".} : int32
    metricsActiveAllocations* {.importc: "MetricsActiveAllocations".} : int32
    mouseDelta* {.importc: "MouseDelta".} : ImVec2
    mousePosPrev* {.importc: "MousePosPrev".} : ImVec2
    mouseClickedPos* {.importc: "MouseClickedPos".} : array[5, ImVec2]
    mouseClickedTime* {.importc: "MouseClickedTime".} : array[5, float64]
    mouseClicked* {.importc: "MouseClicked".} : array[5, bool]
    mouseDoubleClicked* {.importc: "MouseDoubleClicked".} : array[5, bool]
    mouseReleased* {.importc: "MouseReleased".} : array[5, bool]
    mouseDownOwned* {.importc: "MouseDownOwned".} : array[5, bool]
    mouseDownWasDoubleClick* {.importc: "MouseDownWasDoubleClick".} : array[5, bool]
    mouseDownDuration* {.importc: "MouseDownDuration".} : array[5, float32]
    mouseDownDurationPrev* {.importc: "MouseDownDurationPrev".} : array[5, float32]
    mouseDragMaxDistanceAbs* {.importc: "MouseDragMaxDistanceAbs".} : array[5, ImVec2]
    mouseDragMaxDistanceSqr* {.importc: "MouseDragMaxDistanceSqr".} : array[5, float32]
    keysDownDuration* {.importc: "KeysDownDuration".} : array[512, float32]
    keysDownDurationPrev* {.importc: "KeysDownDurationPrev".} : array[512, float32]
    navInputsDownDuration* {.importc: "NavInputsDownDuration".} : array[ImGuiNavInput_COUNT, float32]
    navInputsDownDurationPrev* {.importc: "NavInputsDownDurationPrev".} : array[ImGuiNavInput_COUNT, float32]
    inputQueueCharacters* {.importc: "InputQueueCharacters".} : ImVector_ImWchar
  ImGuiInputTextCallbackData* {.importc: "ImGuiInputTextCallbackData", imgui_header.} = object
    eventFlag* {.importc: "EventFlag".} : ImGuiInputTextFlags
    flags* {.importc: "Flags".} : ImGuiInputTextFlags
    userData* {.importc: "UserData".} : pointer
    eventChar* {.importc: "EventChar".} : ImWchar
    eventKey* {.importc: "EventKey".} : ImGuiKey
    buf* {.importc: "Buf".} : cstring
    bufTextLen* {.importc: "BufTextLen".} : int32
    bufSize* {.importc: "BufSize".} : int32
    bufDirty* {.importc: "BufDirty".} : bool
    cursorPos* {.importc: "CursorPos".} : int32
    selectionStart* {.importc: "SelectionStart".} : int32
    selectionEnd* {.importc: "SelectionEnd".} : int32
  ImGuiListClipper* {.importc: "ImGuiListClipper", imgui_header.} = object
    startPosY* {.importc: "StartPosY".} : float32
    itemsHeight* {.importc: "ItemsHeight".} : float32
    itemsCount* {.importc: "ItemsCount".} : int32
    stepNo* {.importc: "StepNo".} : int32
    displayStart* {.importc: "DisplayStart".} : int32
    displayEnd* {.importc: "DisplayEnd".} : int32
  ImGuiOnceUponAFrame* {.importc: "ImGuiOnceUponAFrame", imgui_header.} = object
    refFrame* {.importc: "RefFrame".} : int32
  ImGuiPayload* {.importc: "ImGuiPayload", imgui_header.} = object
    data* {.importc: "Data".} : pointer
    dataSize* {.importc: "DataSize".} : int32
    sourceId* {.importc: "SourceId".} : ImGuiID
    sourceParentId* {.importc: "SourceParentId".} : ImGuiID
    dataFrameCount* {.importc: "DataFrameCount".} : int32
    dataType* {.importc: "DataType".} : array[32+1, char]
    preview* {.importc: "Preview".} : bool
    delivery* {.importc: "Delivery".} : bool
  ImGuiSizeCallbackData* {.importc: "ImGuiSizeCallbackData", imgui_header.} = object
    userData* {.importc: "UserData".} : pointer
    pos* {.importc: "Pos".} : ImVec2
    currentSize* {.importc: "CurrentSize".} : ImVec2
    desiredSize* {.importc: "DesiredSize".} : ImVec2
  ImGuiStorage* {.importc: "ImGuiStorage", imgui_header.} = object
    data* {.importc: "Data".} : ImVector_Pair
  ImGuiStyle* {.importc: "ImGuiStyle", imgui_header.} = object
    alpha* {.importc: "Alpha".} : float32
    windowPadding* {.importc: "WindowPadding".} : ImVec2
    windowRounding* {.importc: "WindowRounding".} : float32
    windowBorderSize* {.importc: "WindowBorderSize".} : float32
    windowMinSize* {.importc: "WindowMinSize".} : ImVec2
    windowTitleAlign* {.importc: "WindowTitleAlign".} : ImVec2
    childRounding* {.importc: "ChildRounding".} : float32
    childBorderSize* {.importc: "ChildBorderSize".} : float32
    popupRounding* {.importc: "PopupRounding".} : float32
    popupBorderSize* {.importc: "PopupBorderSize".} : float32
    framePadding* {.importc: "FramePadding".} : ImVec2
    frameRounding* {.importc: "FrameRounding".} : float32
    frameBorderSize* {.importc: "FrameBorderSize".} : float32
    itemSpacing* {.importc: "ItemSpacing".} : ImVec2
    itemInnerSpacing* {.importc: "ItemInnerSpacing".} : ImVec2
    touchExtraPadding* {.importc: "TouchExtraPadding".} : ImVec2
    indentSpacing* {.importc: "IndentSpacing".} : float32
    columnsMinSpacing* {.importc: "ColumnsMinSpacing".} : float32
    scrollbarSize* {.importc: "ScrollbarSize".} : float32
    scrollbarRounding* {.importc: "ScrollbarRounding".} : float32
    grabMinSize* {.importc: "GrabMinSize".} : float32
    grabRounding* {.importc: "GrabRounding".} : float32
    tabRounding* {.importc: "TabRounding".} : float32
    tabBorderSize* {.importc: "TabBorderSize".} : float32
    buttonTextAlign* {.importc: "ButtonTextAlign".} : ImVec2
    selectableTextAlign* {.importc: "SelectableTextAlign".} : ImVec2
    displayWindowPadding* {.importc: "DisplayWindowPadding".} : ImVec2
    displaySafeAreaPadding* {.importc: "DisplaySafeAreaPadding".} : ImVec2
    mouseCursorScale* {.importc: "MouseCursorScale".} : float32
    antiAliasedLines* {.importc: "AntiAliasedLines".} : bool
    antiAliasedFill* {.importc: "AntiAliasedFill".} : bool
    curveTessellationTol* {.importc: "CurveTessellationTol".} : float32
    colors* {.importc: "Colors".} : array[ImGuiCol_COUNT, ImVec4]
  ImGuiTextBuffer* {.importc: "ImGuiTextBuffer", imgui_header.} = object
    buf* {.importc: "Buf".} : ImVector_char
  ImGuiTextFilter* {.importc: "ImGuiTextFilter", imgui_header.} = object
    inputBuf* {.importc: "InputBuf".} : array[256, char]
    filters* {.importc: "Filters".} : ImVector_TextRange
    countGrep* {.importc: "CountGrep".} : int32
  ImVec2* {.importc: "ImVec2", imgui_header.} = object
    x* {.importc: "x".} : float32
    y* {.importc: "y".} : float32
  ImVec4* {.importc: "ImVec4", imgui_header.} = object
    x* {.importc: "x".} : float32
    y* {.importc: "y".} : float32
    z* {.importc: "z".} : float32
    w* {.importc: "w".} : float32
  TextRange* {.importc: "TextRange", imgui_header.} = object
    b* {.importc: "b".} : cstring
    e* {.importc: "e".} : cstring

proc customRect_CustomRect*(): void {.imgui_lib, importc: "CustomRect_CustomRect".}
proc customRect_IsPacked*(self: ptr CustomRect): bool {.imgui_lib, importc: "CustomRect_IsPacked".}
proc customRect_destroy*(self: ptr CustomRect): void {.imgui_lib, importc: "CustomRect_destroy".}
proc hSV*(self: ptr ImColor, h: float32, s: float32, v: float32, a: float32 = 1.0f): ImColor {.imgui_lib, importc: "ImColor_HSV".}
proc newImColor*(): void {.imgui_lib, importc: "ImColor_ImColor".}
proc setHSV*(self: ptr ImColor, h: float32, s: float32, v: float32, a: float32 = 1.0f): void {.imgui_lib, importc: "ImColor_SetHSV".}
proc destroy*(self: ptr ImColor): void {.imgui_lib, importc: "ImColor_destroy".}
proc newImDrawCmd*(): void {.imgui_lib, importc: "ImDrawCmd_ImDrawCmd".}
proc destroy*(self: ptr ImDrawCmd): void {.imgui_lib, importc: "ImDrawCmd_destroy".}
proc clear*(self: ptr ImDrawData): void {.imgui_lib, importc: "ImDrawData_Clear".}
proc deIndexAllBuffers*(self: ptr ImDrawData): void {.imgui_lib, importc: "ImDrawData_DeIndexAllBuffers".}
proc newImDrawData*(): void {.imgui_lib, importc: "ImDrawData_ImDrawData".}
proc scaleClipRects*(self: ptr ImDrawData, fb_scale: ImVec2): void {.imgui_lib, importc: "ImDrawData_ScaleClipRects".}
proc destroy*(self: ptr ImDrawData): void {.imgui_lib, importc: "ImDrawData_destroy".}
proc addBezierCurve*(self: ptr ImDrawList, pos0: ImVec2, cp0: ImVec2, cp1: ImVec2, pos1: ImVec2, col: ImU32, thickness: float32, num_segments: int32 = 0): void {.imgui_lib, importc: "ImDrawList_AddBezierCurve".}
proc addCallback*(self: ptr ImDrawList, callback: ImDrawCallback, callback_data: pointer): void {.imgui_lib, importc: "ImDrawList_AddCallback".}
proc addCircle*(self: ptr ImDrawList, centre: ImVec2, radius: float32, col: ImU32, num_segments: int32 = 12, thickness: float32 = 1.0f): void {.imgui_lib, importc: "ImDrawList_AddCircle".}
proc addCircleFilled*(self: ptr ImDrawList, centre: ImVec2, radius: float32, col: ImU32, num_segments: int32 = 12): void {.imgui_lib, importc: "ImDrawList_AddCircleFilled".}
proc addConvexPolyFilled*(self: ptr ImDrawList, points: ptr ImVec2, num_points: int32, col: ImU32): void {.imgui_lib, importc: "ImDrawList_AddConvexPolyFilled".}
proc addDrawCmd*(self: ptr ImDrawList): void {.imgui_lib, importc: "ImDrawList_AddDrawCmd".}
proc addImage*(self: ptr ImDrawList, user_texture_id: ImTextureID, a: ImVec2, b: ImVec2, uv_a: ImVec2, uv_b: ImVec2, col: ImU32): void {.imgui_lib, importc: "ImDrawList_AddImage".}
proc addImageQuad*(self: ptr ImDrawList, user_texture_id: ImTextureID, a: ImVec2, b: ImVec2, c: ImVec2, d: ImVec2, uv_a: ImVec2, uv_b: ImVec2, uv_c: ImVec2, uv_d: ImVec2, col: ImU32): void {.imgui_lib, importc: "ImDrawList_AddImageQuad".}
proc addImageRounded*(self: ptr ImDrawList, user_texture_id: ImTextureID, a: ImVec2, b: ImVec2, uv_a: ImVec2, uv_b: ImVec2, col: ImU32, rounding: float32, rounding_corners: int32 = ImDrawCornerFlags_All): void {.imgui_lib, importc: "ImDrawList_AddImageRounded".}
proc addLine*(self: ptr ImDrawList, a: ImVec2, b: ImVec2, col: ImU32, thickness: float32 = 1.0f): void {.imgui_lib, importc: "ImDrawList_AddLine".}
proc addPolyline*(self: ptr ImDrawList, points: ptr ImVec2, num_points: int32, col: ImU32, closed: bool, thickness: float32): void {.imgui_lib, importc: "ImDrawList_AddPolyline".}
proc addQuad*(self: ptr ImDrawList, a: ImVec2, b: ImVec2, c: ImVec2, d: ImVec2, col: ImU32, thickness: float32 = 1.0f): void {.imgui_lib, importc: "ImDrawList_AddQuad".}
proc addQuadFilled*(self: ptr ImDrawList, a: ImVec2, b: ImVec2, c: ImVec2, d: ImVec2, col: ImU32): void {.imgui_lib, importc: "ImDrawList_AddQuadFilled".}
proc addRect*(self: ptr ImDrawList, a: ImVec2, b: ImVec2, col: ImU32, rounding: float32 = 0.0f, rounding_corners_flags: int32 = ImDrawCornerFlags_All, thickness: float32 = 1.0f): void {.imgui_lib, importc: "ImDrawList_AddRect".}
proc addRectFilled*(self: ptr ImDrawList, a: ImVec2, b: ImVec2, col: ImU32, rounding: float32 = 0.0f, rounding_corners_flags: int32 = ImDrawCornerFlags_All): void {.imgui_lib, importc: "ImDrawList_AddRectFilled".}
proc addRectFilledMultiColor*(self: ptr ImDrawList, a: ImVec2, b: ImVec2, col_upr_left: ImU32, col_upr_right: ImU32, col_bot_right: ImU32, col_bot_left: ImU32): void {.imgui_lib, importc: "ImDrawList_AddRectFilledMultiColor".}
proc addText*(self: ptr ImDrawList, pos: ImVec2, col: ImU32, text_begin: cstring, text_end: cstring = nil): void {.imgui_lib, importc: "ImDrawList_AddText".}
proc addTriangle*(self: ptr ImDrawList, a: ImVec2, b: ImVec2, c: ImVec2, col: ImU32, thickness: float32 = 1.0f): void {.imgui_lib, importc: "ImDrawList_AddTriangle".}
proc addTriangleFilled*(self: ptr ImDrawList, a: ImVec2, b: ImVec2, c: ImVec2, col: ImU32): void {.imgui_lib, importc: "ImDrawList_AddTriangleFilled".}
proc channelsMerge*(self: ptr ImDrawList): void {.imgui_lib, importc: "ImDrawList_ChannelsMerge".}
proc channelsSetCurrent*(self: ptr ImDrawList, channel_index: int32): void {.imgui_lib, importc: "ImDrawList_ChannelsSetCurrent".}
proc channelsSplit*(self: ptr ImDrawList, channels_count: int32): void {.imgui_lib, importc: "ImDrawList_ChannelsSplit".}
proc clear*(self: ptr ImDrawList): void {.imgui_lib, importc: "ImDrawList_Clear".}
proc clearFreeMemory*(self: ptr ImDrawList): void {.imgui_lib, importc: "ImDrawList_ClearFreeMemory".}
proc cloneOutput*(self: ptr ImDrawList): ptr ImDrawList {.imgui_lib, importc: "ImDrawList_CloneOutput".}
proc getClipRectMax*(self: ptr ImDrawList): ImVec2 {.imgui_lib, importc: "ImDrawList_GetClipRectMax".}
proc getClipRectMin*(self: ptr ImDrawList): ImVec2 {.imgui_lib, importc: "ImDrawList_GetClipRectMin".}
proc newImDrawList*(shared_data: ptr ImDrawListSharedData): void {.imgui_lib, importc: "ImDrawList_ImDrawList".}
proc pathArcTo*(self: ptr ImDrawList, centre: ImVec2, radius: float32, a_min: float32, a_max: float32, num_segments: int32 = 10): void {.imgui_lib, importc: "ImDrawList_PathArcTo".}
proc pathArcToFast*(self: ptr ImDrawList, centre: ImVec2, radius: float32, a_min_of_12: int32, a_max_of_12: int32): void {.imgui_lib, importc: "ImDrawList_PathArcToFast".}
proc pathBezierCurveTo*(self: ptr ImDrawList, p1: ImVec2, p2: ImVec2, p3: ImVec2, num_segments: int32 = 0): void {.imgui_lib, importc: "ImDrawList_PathBezierCurveTo".}
proc pathClear*(self: ptr ImDrawList): void {.imgui_lib, importc: "ImDrawList_PathClear".}
proc pathFillConvex*(self: ptr ImDrawList, col: ImU32): void {.imgui_lib, importc: "ImDrawList_PathFillConvex".}
proc pathLineTo*(self: ptr ImDrawList, pos: ImVec2): void {.imgui_lib, importc: "ImDrawList_PathLineTo".}
proc pathLineToMergeDuplicate*(self: ptr ImDrawList, pos: ImVec2): void {.imgui_lib, importc: "ImDrawList_PathLineToMergeDuplicate".}
proc pathRect*(self: ptr ImDrawList, rect_min: ImVec2, rect_max: ImVec2, rounding: float32 = 0.0f, rounding_corners_flags: int32 = ImDrawCornerFlags_All): void {.imgui_lib, importc: "ImDrawList_PathRect".}
proc pathStroke*(self: ptr ImDrawList, col: ImU32, closed: bool, thickness: float32 = 1.0f): void {.imgui_lib, importc: "ImDrawList_PathStroke".}
proc popClipRect*(self: ptr ImDrawList): void {.imgui_lib, importc: "ImDrawList_PopClipRect".}
proc popTextureID*(self: ptr ImDrawList): void {.imgui_lib, importc: "ImDrawList_PopTextureID".}
proc primQuadUV*(self: ptr ImDrawList, a: ImVec2, b: ImVec2, c: ImVec2, d: ImVec2, uv_a: ImVec2, uv_b: ImVec2, uv_c: ImVec2, uv_d: ImVec2, col: ImU32): void {.imgui_lib, importc: "ImDrawList_PrimQuadUV".}
proc primRect*(self: ptr ImDrawList, a: ImVec2, b: ImVec2, col: ImU32): void {.imgui_lib, importc: "ImDrawList_PrimRect".}
proc primRectUV*(self: ptr ImDrawList, a: ImVec2, b: ImVec2, uv_a: ImVec2, uv_b: ImVec2, col: ImU32): void {.imgui_lib, importc: "ImDrawList_PrimRectUV".}
proc primReserve*(self: ptr ImDrawList, idx_count: int32, vtx_count: int32): void {.imgui_lib, importc: "ImDrawList_PrimReserve".}
proc primVtx*(self: ptr ImDrawList, pos: ImVec2, uv: ImVec2, col: ImU32): void {.imgui_lib, importc: "ImDrawList_PrimVtx".}
proc primWriteIdx*(self: ptr ImDrawList, idx: ImDrawIdx): void {.imgui_lib, importc: "ImDrawList_PrimWriteIdx".}
proc primWriteVtx*(self: ptr ImDrawList, pos: ImVec2, uv: ImVec2, col: ImU32): void {.imgui_lib, importc: "ImDrawList_PrimWriteVtx".}
proc pushClipRect*(self: ptr ImDrawList, clip_rect_min: ImVec2, clip_rect_max: ImVec2, intersect_with_current_clip_rect: bool = false): void {.imgui_lib, importc: "ImDrawList_PushClipRect".}
proc pushClipRectFullScreen*(self: ptr ImDrawList): void {.imgui_lib, importc: "ImDrawList_PushClipRectFullScreen".}
proc pushTextureID*(self: ptr ImDrawList, texture_id: ImTextureID): void {.imgui_lib, importc: "ImDrawList_PushTextureID".}
proc updateClipRect*(self: ptr ImDrawList): void {.imgui_lib, importc: "ImDrawList_UpdateClipRect".}
proc updateTextureID*(self: ptr ImDrawList): void {.imgui_lib, importc: "ImDrawList_UpdateTextureID".}
proc destroy*(self: ptr ImDrawList): void {.imgui_lib, importc: "ImDrawList_destroy".}
proc addCustomRectFontGlyph*(self: ptr ImFontAtlas, font: ptr ImFont, id: ImWchar, width: int32, height: int32, advance_x: float32, offset: ImVec2): int32 {.imgui_lib, importc: "ImFontAtlas_AddCustomRectFontGlyph".}
proc addCustomRectRegular*(self: ptr ImFontAtlas, id: uint32, width: int32, height: int32): int32 {.imgui_lib, importc: "ImFontAtlas_AddCustomRectRegular".}
proc addFont*(self: ptr ImFontAtlas, font_cfg: ptr ImFontConfig): ptr ImFont {.imgui_lib, importc: "ImFontAtlas_AddFont".}
proc addFontDefault*(self: ptr ImFontAtlas, font_cfg: ptr ImFontConfig = nil): ptr ImFont {.imgui_lib, importc: "ImFontAtlas_AddFontDefault".}
proc addFontFromFileTTF*(self: ptr ImFontAtlas, filename: cstring, size_pixels: float32, font_cfg: ptr ImFontConfig = nil, glyph_ranges: ptr ImWchar = nil): ptr ImFont {.imgui_lib, importc: "ImFontAtlas_AddFontFromFileTTF".}
proc addFontFromMemoryCompressedBase85TTF*(self: ptr ImFontAtlas, compressed_font_data_base85: cstring, size_pixels: float32, font_cfg: ptr ImFontConfig = nil, glyph_ranges: ptr ImWchar = nil): ptr ImFont {.imgui_lib, importc: "ImFontAtlas_AddFontFromMemoryCompressedBase85TTF".}
proc addFontFromMemoryCompressedTTF*(self: ptr ImFontAtlas, compressed_font_data: pointer, compressed_font_size: int32, size_pixels: float32, font_cfg: ptr ImFontConfig = nil, glyph_ranges: ptr ImWchar = nil): ptr ImFont {.imgui_lib, importc: "ImFontAtlas_AddFontFromMemoryCompressedTTF".}
proc addFontFromMemoryTTF*(self: ptr ImFontAtlas, font_data: pointer, font_size: int32, size_pixels: float32, font_cfg: ptr ImFontConfig = nil, glyph_ranges: ptr ImWchar = nil): ptr ImFont {.imgui_lib, importc: "ImFontAtlas_AddFontFromMemoryTTF".}
proc build*(self: ptr ImFontAtlas): bool {.imgui_lib, importc: "ImFontAtlas_Build".}
proc calcCustomRectUV*(self: ptr ImFontAtlas, rect: ptr CustomRect, out_uv_min: ptr ImVec2, out_uv_max: ptr ImVec2): void {.imgui_lib, importc: "ImFontAtlas_CalcCustomRectUV".}
proc clear*(self: ptr ImFontAtlas): void {.imgui_lib, importc: "ImFontAtlas_Clear".}
proc clearFonts*(self: ptr ImFontAtlas): void {.imgui_lib, importc: "ImFontAtlas_ClearFonts".}
proc clearInputData*(self: ptr ImFontAtlas): void {.imgui_lib, importc: "ImFontAtlas_ClearInputData".}
proc clearTexData*(self: ptr ImFontAtlas): void {.imgui_lib, importc: "ImFontAtlas_ClearTexData".}
proc getCustomRectByIndex*(self: ptr ImFontAtlas, index: int32): ptr CustomRect {.imgui_lib, importc: "ImFontAtlas_GetCustomRectByIndex".}
proc getGlyphRangesChineseFull*(self: ptr ImFontAtlas): ptr ImWchar {.imgui_lib, importc: "ImFontAtlas_GetGlyphRangesChineseFull".}
proc getGlyphRangesChineseSimplifiedCommon*(self: ptr ImFontAtlas): ptr ImWchar {.imgui_lib, importc: "ImFontAtlas_GetGlyphRangesChineseSimplifiedCommon".}
proc getGlyphRangesCyrillic*(self: ptr ImFontAtlas): ptr ImWchar {.imgui_lib, importc: "ImFontAtlas_GetGlyphRangesCyrillic".}
proc getGlyphRangesDefault*(self: ptr ImFontAtlas): ptr ImWchar {.imgui_lib, importc: "ImFontAtlas_GetGlyphRangesDefault".}
proc getGlyphRangesJapanese*(self: ptr ImFontAtlas): ptr ImWchar {.imgui_lib, importc: "ImFontAtlas_GetGlyphRangesJapanese".}
proc getGlyphRangesKorean*(self: ptr ImFontAtlas): ptr ImWchar {.imgui_lib, importc: "ImFontAtlas_GetGlyphRangesKorean".}
proc getGlyphRangesThai*(self: ptr ImFontAtlas): ptr ImWchar {.imgui_lib, importc: "ImFontAtlas_GetGlyphRangesThai".}
proc getGlyphRangesVietnamese*(self: ptr ImFontAtlas): ptr ImWchar {.imgui_lib, importc: "ImFontAtlas_GetGlyphRangesVietnamese".}
proc getMouseCursorTexData*(self: ptr ImFontAtlas, cursor: ImGuiMouseCursor, out_offset: ptr ImVec2, out_size: ptr ImVec2, out_uv_border: ptr ImVec2, out_uv_fill: ptr ImVec2): bool {.imgui_lib, importc: "ImFontAtlas_GetMouseCursorTexData".}
proc getTexDataAsAlpha8*(self: ptr ImFontAtlas, out_pixels: ptr ptr char, out_width: ptr int32, out_height: ptr int32, out_bytes_per_pixel: ptr int32 = nil): void {.imgui_lib, importc: "ImFontAtlas_GetTexDataAsAlpha8".}
proc getTexDataAsRGBA32*(self: ptr ImFontAtlas, out_pixels: ptr ptr char, out_width: ptr int32, out_height: ptr int32, out_bytes_per_pixel: ptr int32 = nil): void {.imgui_lib, importc: "ImFontAtlas_GetTexDataAsRGBA32".}
proc newImFontAtlas*(): void {.imgui_lib, importc: "ImFontAtlas_ImFontAtlas".}
proc isBuilt*(self: ptr ImFontAtlas): bool {.imgui_lib, importc: "ImFontAtlas_IsBuilt".}
proc setTexID*(self: ptr ImFontAtlas, id: ImTextureID): void {.imgui_lib, importc: "ImFontAtlas_SetTexID".}
proc destroy*(self: ptr ImFontAtlas): void {.imgui_lib, importc: "ImFontAtlas_destroy".}
proc newImFontConfig*(): void {.imgui_lib, importc: "ImFontConfig_ImFontConfig".}
proc destroy*(self: ptr ImFontConfig): void {.imgui_lib, importc: "ImFontConfig_destroy".}
proc addChar*(self: ptr ImFontGlyphRangesBuilder, c: ImWchar): void {.imgui_lib, importc: "ImFontGlyphRangesBuilder_AddChar".}
proc addRanges*(self: ptr ImFontGlyphRangesBuilder, ranges: ptr ImWchar): void {.imgui_lib, importc: "ImFontGlyphRangesBuilder_AddRanges".}
proc addText*(self: ptr ImFontGlyphRangesBuilder, text: cstring, text_end: cstring = nil): void {.imgui_lib, importc: "ImFontGlyphRangesBuilder_AddText".}
proc buildRanges*(self: ptr ImFontGlyphRangesBuilder, out_ranges: ptr ImVector_ImWchar): void {.imgui_lib, importc: "ImFontGlyphRangesBuilder_BuildRanges".}
proc getBit*(self: ptr ImFontGlyphRangesBuilder, n: int32): bool {.imgui_lib, importc: "ImFontGlyphRangesBuilder_GetBit".}
proc newImFontGlyphRangesBuilder*(): void {.imgui_lib, importc: "ImFontGlyphRangesBuilder_ImFontGlyphRangesBuilder".}
proc setBit*(self: ptr ImFontGlyphRangesBuilder, n: int32): void {.imgui_lib, importc: "ImFontGlyphRangesBuilder_SetBit".}
proc destroy*(self: ptr ImFontGlyphRangesBuilder): void {.imgui_lib, importc: "ImFontGlyphRangesBuilder_destroy".}
proc addGlyph*(self: ptr ImFont, c: ImWchar, x0: float32, y0: float32, x1: float32, y1: float32, u0: float32, v0: float32, u1: float32, v1: float32, advance_x: float32): void {.imgui_lib, importc: "ImFont_AddGlyph".}
proc addRemapChar*(self: ptr ImFont, dst: ImWchar, src: ImWchar, overwrite_dst: bool = true): void {.imgui_lib, importc: "ImFont_AddRemapChar".}
proc buildLookupTable*(self: ptr ImFont): void {.imgui_lib, importc: "ImFont_BuildLookupTable".}
proc calcTextSizeA*(self: ptr ImFont, size: float32, max_width: float32, wrap_width: float32, text_begin: cstring, text_end: cstring = nil, remaining: ptr ptr char = nil): ImVec2 {.imgui_lib, importc: "ImFont_CalcTextSizeA".}
proc calcWordWrapPositionA*(self: ptr ImFont, scale: float32, text: cstring, text_end: cstring, wrap_width: float32): cstring {.imgui_lib, importc: "ImFont_CalcWordWrapPositionA".}
proc clearOutputData*(self: ptr ImFont): void {.imgui_lib, importc: "ImFont_ClearOutputData".}
proc findGlyph*(self: ptr ImFont, c: ImWchar): ptr ImFontGlyph {.imgui_lib, importc: "ImFont_FindGlyph".}
proc findGlyphNoFallback*(self: ptr ImFont, c: ImWchar): ptr ImFontGlyph {.imgui_lib, importc: "ImFont_FindGlyphNoFallback".}
proc getCharAdvance*(self: ptr ImFont, c: ImWchar): float32 {.imgui_lib, importc: "ImFont_GetCharAdvance".}
proc getDebugName*(self: ptr ImFont): cstring {.imgui_lib, importc: "ImFont_GetDebugName".}
proc growIndex*(self: ptr ImFont, new_size: int32): void {.imgui_lib, importc: "ImFont_GrowIndex".}
proc newImFont*(): void {.imgui_lib, importc: "ImFont_ImFont".}
proc isLoaded*(self: ptr ImFont): bool {.imgui_lib, importc: "ImFont_IsLoaded".}
proc renderChar*(self: ptr ImFont, draw_list: ptr ImDrawList, size: float32, pos: ImVec2, col: ImU32, c: ImWchar): void {.imgui_lib, importc: "ImFont_RenderChar".}
proc renderText*(self: ptr ImFont, draw_list: ptr ImDrawList, size: float32, pos: ImVec2, col: ImU32, clip_rect: ImVec4, text_begin: cstring, text_end: cstring, wrap_width: float32 = 0.0f, cpu_fine_clip: bool = false): void {.imgui_lib, importc: "ImFont_RenderText".}
proc setFallbackChar*(self: ptr ImFont, c: ImWchar): void {.imgui_lib, importc: "ImFont_SetFallbackChar".}
proc destroy*(self: ptr ImFont): void {.imgui_lib, importc: "ImFont_destroy".}
proc addInputCharacter*(self: ptr ImGuiIO, c: ImWchar): void {.imgui_lib, importc: "ImGuiIO_AddInputCharacter".}
proc addInputCharactersUTF8*(self: ptr ImGuiIO, str: cstring): void {.imgui_lib, importc: "ImGuiIO_AddInputCharactersUTF8".}
proc clearInputCharacters*(self: ptr ImGuiIO): void {.imgui_lib, importc: "ImGuiIO_ClearInputCharacters".}
proc newImGuiIO*(): void {.imgui_lib, importc: "ImGuiIO_ImGuiIO".}
proc destroy*(self: ptr ImGuiIO): void {.imgui_lib, importc: "ImGuiIO_destroy".}
proc deleteChars*(self: ptr ImGuiInputTextCallbackData, pos: int32, bytes_count: int32): void {.imgui_lib, importc: "ImGuiInputTextCallbackData_DeleteChars".}
proc hasSelection*(self: ptr ImGuiInputTextCallbackData): bool {.imgui_lib, importc: "ImGuiInputTextCallbackData_HasSelection".}
proc newImGuiInputTextCallbackData*(): void {.imgui_lib, importc: "ImGuiInputTextCallbackData_ImGuiInputTextCallbackData".}
proc insertChars*(self: ptr ImGuiInputTextCallbackData, pos: int32, text: cstring, text_end: cstring = nil): void {.imgui_lib, importc: "ImGuiInputTextCallbackData_InsertChars".}
proc destroy*(self: ptr ImGuiInputTextCallbackData): void {.imgui_lib, importc: "ImGuiInputTextCallbackData_destroy".}
proc begin*(self: ptr ImGuiListClipper, items_count: int32, items_height: float32 = -1.0f): void {.imgui_lib, importc: "ImGuiListClipper_Begin".}
proc igEnd*(self: ptr ImGuiListClipper): void {.imgui_lib, importc: "ImGuiListClipper_End".}
proc newImGuiListClipper*(items_count: int32 = -1, items_height: float32 = -1.0f): void {.imgui_lib, importc: "ImGuiListClipper_ImGuiListClipper".}
proc step*(self: ptr ImGuiListClipper): bool {.imgui_lib, importc: "ImGuiListClipper_Step".}
proc destroy*(self: ptr ImGuiListClipper): void {.imgui_lib, importc: "ImGuiListClipper_destroy".}
proc newImGuiOnceUponAFrame*(): void {.imgui_lib, importc: "ImGuiOnceUponAFrame_ImGuiOnceUponAFrame".}
proc destroy*(self: ptr ImGuiOnceUponAFrame): void {.imgui_lib, importc: "ImGuiOnceUponAFrame_destroy".}
proc clear*(self: ptr ImGuiPayload): void {.imgui_lib, importc: "ImGuiPayload_Clear".}
proc newImGuiPayload*(): void {.imgui_lib, importc: "ImGuiPayload_ImGuiPayload".}
proc isDataType*(self: ptr ImGuiPayload, `type`: cstring): bool {.imgui_lib, importc: "ImGuiPayload_IsDataType".}
proc isDelivery*(self: ptr ImGuiPayload): bool {.imgui_lib, importc: "ImGuiPayload_IsDelivery".}
proc isPreview*(self: ptr ImGuiPayload): bool {.imgui_lib, importc: "ImGuiPayload_IsPreview".}
proc destroy*(self: ptr ImGuiPayload): void {.imgui_lib, importc: "ImGuiPayload_destroy".}
proc buildSortByKey*(self: ptr ImGuiStorage): void {.imgui_lib, importc: "ImGuiStorage_BuildSortByKey".}
proc clear*(self: ptr ImGuiStorage): void {.imgui_lib, importc: "ImGuiStorage_Clear".}
proc getBool*(self: ptr ImGuiStorage, key: ImGuiID, default_val: bool = false): bool {.imgui_lib, importc: "ImGuiStorage_GetBool".}
proc getBoolRef*(self: ptr ImGuiStorage, key: ImGuiID, default_val: bool = false): ptr bool {.imgui_lib, importc: "ImGuiStorage_GetBoolRef".}
proc getFloat*(self: ptr ImGuiStorage, key: ImGuiID, default_val: float32 = 0.0f): float32 {.imgui_lib, importc: "ImGuiStorage_GetFloat".}
proc getFloatRef*(self: ptr ImGuiStorage, key: ImGuiID, default_val: float32 = 0.0f): ptr float32 {.imgui_lib, importc: "ImGuiStorage_GetFloatRef".}
proc getInt*(self: ptr ImGuiStorage, key: ImGuiID, default_val: int32 = 0): int32 {.imgui_lib, importc: "ImGuiStorage_GetInt".}
proc getIntRef*(self: ptr ImGuiStorage, key: ImGuiID, default_val: int32 = 0): ptr int32 {.imgui_lib, importc: "ImGuiStorage_GetIntRef".}
proc getVoidPtr*(self: ptr ImGuiStorage, key: ImGuiID): pointer {.imgui_lib, importc: "ImGuiStorage_GetVoidPtr".}
proc getVoidPtrRef*(self: ptr ImGuiStorage, key: ImGuiID, default_val: pointer = nil): ptr pointer {.imgui_lib, importc: "ImGuiStorage_GetVoidPtrRef".}
proc setAllInt*(self: ptr ImGuiStorage, val: int32): void {.imgui_lib, importc: "ImGuiStorage_SetAllInt".}
proc setBool*(self: ptr ImGuiStorage, key: ImGuiID, val: bool): void {.imgui_lib, importc: "ImGuiStorage_SetBool".}
proc setFloat*(self: ptr ImGuiStorage, key: ImGuiID, val: float32): void {.imgui_lib, importc: "ImGuiStorage_SetFloat".}
proc setInt*(self: ptr ImGuiStorage, key: ImGuiID, val: int32): void {.imgui_lib, importc: "ImGuiStorage_SetInt".}
proc setVoidPtr*(self: ptr ImGuiStorage, key: ImGuiID, val: pointer): void {.imgui_lib, importc: "ImGuiStorage_SetVoidPtr".}
proc newImGuiStyle*(): void {.imgui_lib, importc: "ImGuiStyle_ImGuiStyle".}
proc scaleAllSizes*(self: ptr ImGuiStyle, scale_factor: float32): void {.imgui_lib, importc: "ImGuiStyle_ScaleAllSizes".}
proc destroy*(self: ptr ImGuiStyle): void {.imgui_lib, importc: "ImGuiStyle_destroy".}
proc newImGuiTextBuffer*(): void {.imgui_lib, importc: "ImGuiTextBuffer_ImGuiTextBuffer".}
proc append*(self: ptr ImGuiTextBuffer, str: cstring, str_end: cstring = nil): void {.imgui_lib, importc: "ImGuiTextBuffer_append".}
proc appendf*(self: ptr ImGuiTextBuffer, fmt: cstring): void {.imgui_lib, importc: "ImGuiTextBuffer_appendf", varargs.}
proc appendfv*(self: ptr ImGuiTextBuffer, fmt: cstring): void {.imgui_lib, importc: "ImGuiTextBuffer_appendfv", varargs.}
proc begin*(self: ptr ImGuiTextBuffer): cstring {.imgui_lib, importc: "ImGuiTextBuffer_begin".}
proc c_str*(self: ptr ImGuiTextBuffer): cstring {.imgui_lib, importc: "ImGuiTextBuffer_c_str".}
proc clear*(self: ptr ImGuiTextBuffer): void {.imgui_lib, importc: "ImGuiTextBuffer_clear".}
proc destroy*(self: ptr ImGuiTextBuffer): void {.imgui_lib, importc: "ImGuiTextBuffer_destroy".}
proc empty*(self: ptr ImGuiTextBuffer): bool {.imgui_lib, importc: "ImGuiTextBuffer_empty".}
proc igEnd*(self: ptr ImGuiTextBuffer): cstring {.imgui_lib, importc: "ImGuiTextBuffer_end".}
proc reserve*(self: ptr ImGuiTextBuffer, capacity: int32): void {.imgui_lib, importc: "ImGuiTextBuffer_reserve".}
proc size*(self: ptr ImGuiTextBuffer): int32 {.imgui_lib, importc: "ImGuiTextBuffer_size".}
proc build*(self: ptr ImGuiTextFilter): void {.imgui_lib, importc: "ImGuiTextFilter_Build".}
proc clear*(self: ptr ImGuiTextFilter): void {.imgui_lib, importc: "ImGuiTextFilter_Clear".}
proc draw*(self: ptr ImGuiTextFilter, label: cstring, width: float32 = 0.0f): bool {.imgui_lib, importc: "ImGuiTextFilter_Draw".}
proc newImGuiTextFilter*(default_filter: cstring = ""): void {.imgui_lib, importc: "ImGuiTextFilter_ImGuiTextFilter".}
proc isActive*(self: ptr ImGuiTextFilter): bool {.imgui_lib, importc: "ImGuiTextFilter_IsActive".}
proc passFilter*(self: ptr ImGuiTextFilter, text: cstring, text_end: cstring = nil): bool {.imgui_lib, importc: "ImGuiTextFilter_PassFilter".}
proc destroy*(self: ptr ImGuiTextFilter): void {.imgui_lib, importc: "ImGuiTextFilter_destroy".}
proc newImVec2*(): void {.imgui_lib, importc: "ImVec2_ImVec2".}
proc destroy*(self: ptr ImVec2): void {.imgui_lib, importc: "ImVec2_destroy".}
proc newImVec4*(): void {.imgui_lib, importc: "ImVec4_ImVec4".}
proc destroy*(self: ptr ImVec4): void {.imgui_lib, importc: "ImVec4_destroy".}
proc customRect_ImVector_CustomRect*(): void {.imgui_lib, importc: "ImVector_CustomRect_ImVector_CustomRect".}
proc customRect_grow_capacity*(self: ptr ImVector_CustomRect, sz: int32): int32 {.imgui_lib, importc: "ImVector_CustomRect__grow_capacity".}
proc customRect_back*(self: ptr ImVector_CustomRect): ptr CustomRect {.imgui_lib, importc: "ImVector_CustomRect_back".}
proc customRect_begin*(self: ptr ImVector_CustomRect): ptr CustomRect {.imgui_lib, importc: "ImVector_CustomRect_begin".}
proc customRect_capacity*(self: ptr ImVector_CustomRect): int32 {.imgui_lib, importc: "ImVector_CustomRect_capacity".}
proc customRect_clear*(self: ptr ImVector_CustomRect): void {.imgui_lib, importc: "ImVector_CustomRect_clear".}
proc customRect_destroy*(self: ptr ImVector_CustomRect): void {.imgui_lib, importc: "ImVector_CustomRect_destroy".}
proc customRect_empty*(self: ptr ImVector_CustomRect): bool {.imgui_lib, importc: "ImVector_CustomRect_empty".}
proc customRect_end*(self: ptr ImVector_CustomRect): ptr CustomRect {.imgui_lib, importc: "ImVector_CustomRect_end".}
proc customRect_erase*(self: ptr ImVector_CustomRect, it: ptr CustomRect): ptr CustomRect {.imgui_lib, importc: "ImVector_CustomRect_erase".}
proc customRect_erase_unsorted*(self: ptr ImVector_CustomRect, it: ptr CustomRect): ptr CustomRect {.imgui_lib, importc: "ImVector_CustomRect_erase_unsorted".}
proc customRect_front*(self: ptr ImVector_CustomRect): ptr CustomRect {.imgui_lib, importc: "ImVector_CustomRect_front".}
proc customRect_index_from_ptr*(self: ptr ImVector_CustomRect, it: ptr CustomRect): int32 {.imgui_lib, importc: "ImVector_CustomRect_index_from_ptr".}
proc customRect_insert*(self: ptr ImVector_CustomRect, it: ptr CustomRect, v: CustomRect): ptr CustomRect {.imgui_lib, importc: "ImVector_CustomRect_insert".}
proc customRect_pop_back*(self: ptr ImVector_CustomRect): void {.imgui_lib, importc: "ImVector_CustomRect_pop_back".}
proc customRect_push_back*(self: ptr ImVector_CustomRect, v: CustomRect): void {.imgui_lib, importc: "ImVector_CustomRect_push_back".}
proc customRect_push_front*(self: ptr ImVector_CustomRect, v: CustomRect): void {.imgui_lib, importc: "ImVector_CustomRect_push_front".}
proc customRect_reserve*(self: ptr ImVector_CustomRect, new_capacity: int32): void {.imgui_lib, importc: "ImVector_CustomRect_reserve".}
proc customRect_resize*(self: ptr ImVector_CustomRect, new_size: int32): void {.imgui_lib, importc: "ImVector_CustomRect_resize".}
proc customRect_size*(self: ptr ImVector_CustomRect): int32 {.imgui_lib, importc: "ImVector_CustomRect_size".}
proc customRect_size_in_bytes*(self: ptr ImVector_CustomRect): int32 {.imgui_lib, importc: "ImVector_CustomRect_size_in_bytes".}
proc customRect_swap*(self: ptr ImVector_CustomRect, rhs: ImVector_CustomRect): void {.imgui_lib, importc: "ImVector_CustomRect_swap".}
proc newImDrawChannel_ImVector_ImDrawChannel*(): void {.imgui_lib, importc: "ImVector_ImDrawChannel_ImVector_ImDrawChannel".}
proc newImDrawChannel_grow_capacity*(self: ptr ImVector_ImDrawChannel, sz: int32): int32 {.imgui_lib, importc: "ImVector_ImDrawChannel__grow_capacity".}
proc newImDrawChannel_back*(self: ptr ImVector_ImDrawChannel): ptr ImDrawChannel {.imgui_lib, importc: "ImVector_ImDrawChannel_back".}
proc newImDrawChannel_begin*(self: ptr ImVector_ImDrawChannel): ptr ImDrawChannel {.imgui_lib, importc: "ImVector_ImDrawChannel_begin".}
proc newImDrawChannel_capacity*(self: ptr ImVector_ImDrawChannel): int32 {.imgui_lib, importc: "ImVector_ImDrawChannel_capacity".}
proc newImDrawChannel_clear*(self: ptr ImVector_ImDrawChannel): void {.imgui_lib, importc: "ImVector_ImDrawChannel_clear".}
proc newImDrawChannel_destroy*(self: ptr ImVector_ImDrawChannel): void {.imgui_lib, importc: "ImVector_ImDrawChannel_destroy".}
proc newImDrawChannel_empty*(self: ptr ImVector_ImDrawChannel): bool {.imgui_lib, importc: "ImVector_ImDrawChannel_empty".}
proc newImDrawChannel_end*(self: ptr ImVector_ImDrawChannel): ptr ImDrawChannel {.imgui_lib, importc: "ImVector_ImDrawChannel_end".}
proc newImDrawChannel_erase*(self: ptr ImVector_ImDrawChannel, it: ptr ImDrawChannel): ptr ImDrawChannel {.imgui_lib, importc: "ImVector_ImDrawChannel_erase".}
proc newImDrawChannel_erase_unsorted*(self: ptr ImVector_ImDrawChannel, it: ptr ImDrawChannel): ptr ImDrawChannel {.imgui_lib, importc: "ImVector_ImDrawChannel_erase_unsorted".}
proc newImDrawChannel_front*(self: ptr ImVector_ImDrawChannel): ptr ImDrawChannel {.imgui_lib, importc: "ImVector_ImDrawChannel_front".}
proc newImDrawChannel_index_from_ptr*(self: ptr ImVector_ImDrawChannel, it: ptr ImDrawChannel): int32 {.imgui_lib, importc: "ImVector_ImDrawChannel_index_from_ptr".}
proc newImDrawChannel_insert*(self: ptr ImVector_ImDrawChannel, it: ptr ImDrawChannel, v: ImDrawChannel): ptr ImDrawChannel {.imgui_lib, importc: "ImVector_ImDrawChannel_insert".}
proc newImDrawChannel_pop_back*(self: ptr ImVector_ImDrawChannel): void {.imgui_lib, importc: "ImVector_ImDrawChannel_pop_back".}
proc newImDrawChannel_push_back*(self: ptr ImVector_ImDrawChannel, v: ImDrawChannel): void {.imgui_lib, importc: "ImVector_ImDrawChannel_push_back".}
proc newImDrawChannel_push_front*(self: ptr ImVector_ImDrawChannel, v: ImDrawChannel): void {.imgui_lib, importc: "ImVector_ImDrawChannel_push_front".}
proc newImDrawChannel_reserve*(self: ptr ImVector_ImDrawChannel, new_capacity: int32): void {.imgui_lib, importc: "ImVector_ImDrawChannel_reserve".}
proc newImDrawChannel_resize*(self: ptr ImVector_ImDrawChannel, new_size: int32): void {.imgui_lib, importc: "ImVector_ImDrawChannel_resize".}
proc newImDrawChannel_size*(self: ptr ImVector_ImDrawChannel): int32 {.imgui_lib, importc: "ImVector_ImDrawChannel_size".}
proc newImDrawChannel_size_in_bytes*(self: ptr ImVector_ImDrawChannel): int32 {.imgui_lib, importc: "ImVector_ImDrawChannel_size_in_bytes".}
proc newImDrawChannel_swap*(self: ptr ImVector_ImDrawChannel, rhs: ImVector_ImDrawChannel): void {.imgui_lib, importc: "ImVector_ImDrawChannel_swap".}
proc newImDrawCmd_ImVector_ImDrawCmd*(): void {.imgui_lib, importc: "ImVector_ImDrawCmd_ImVector_ImDrawCmd".}
proc newImDrawCmd_grow_capacity*(self: ptr ImVector_ImDrawCmd, sz: int32): int32 {.imgui_lib, importc: "ImVector_ImDrawCmd__grow_capacity".}
proc newImDrawCmd_back*(self: ptr ImVector_ImDrawCmd): ptr ImDrawCmd {.imgui_lib, importc: "ImVector_ImDrawCmd_back".}
proc newImDrawCmd_begin*(self: ptr ImVector_ImDrawCmd): ptr ImDrawCmd {.imgui_lib, importc: "ImVector_ImDrawCmd_begin".}
proc newImDrawCmd_capacity*(self: ptr ImVector_ImDrawCmd): int32 {.imgui_lib, importc: "ImVector_ImDrawCmd_capacity".}
proc newImDrawCmd_clear*(self: ptr ImVector_ImDrawCmd): void {.imgui_lib, importc: "ImVector_ImDrawCmd_clear".}
proc newImDrawCmd_destroy*(self: ptr ImVector_ImDrawCmd): void {.imgui_lib, importc: "ImVector_ImDrawCmd_destroy".}
proc newImDrawCmd_empty*(self: ptr ImVector_ImDrawCmd): bool {.imgui_lib, importc: "ImVector_ImDrawCmd_empty".}
proc newImDrawCmd_end*(self: ptr ImVector_ImDrawCmd): ptr ImDrawCmd {.imgui_lib, importc: "ImVector_ImDrawCmd_end".}
proc newImDrawCmd_erase*(self: ptr ImVector_ImDrawCmd, it: ptr ImDrawCmd): ptr ImDrawCmd {.imgui_lib, importc: "ImVector_ImDrawCmd_erase".}
proc newImDrawCmd_erase_unsorted*(self: ptr ImVector_ImDrawCmd, it: ptr ImDrawCmd): ptr ImDrawCmd {.imgui_lib, importc: "ImVector_ImDrawCmd_erase_unsorted".}
proc newImDrawCmd_front*(self: ptr ImVector_ImDrawCmd): ptr ImDrawCmd {.imgui_lib, importc: "ImVector_ImDrawCmd_front".}
proc newImDrawCmd_index_from_ptr*(self: ptr ImVector_ImDrawCmd, it: ptr ImDrawCmd): int32 {.imgui_lib, importc: "ImVector_ImDrawCmd_index_from_ptr".}
proc newImDrawCmd_insert*(self: ptr ImVector_ImDrawCmd, it: ptr ImDrawCmd, v: ImDrawCmd): ptr ImDrawCmd {.imgui_lib, importc: "ImVector_ImDrawCmd_insert".}
proc newImDrawCmd_pop_back*(self: ptr ImVector_ImDrawCmd): void {.imgui_lib, importc: "ImVector_ImDrawCmd_pop_back".}
proc newImDrawCmd_push_back*(self: ptr ImVector_ImDrawCmd, v: ImDrawCmd): void {.imgui_lib, importc: "ImVector_ImDrawCmd_push_back".}
proc newImDrawCmd_push_front*(self: ptr ImVector_ImDrawCmd, v: ImDrawCmd): void {.imgui_lib, importc: "ImVector_ImDrawCmd_push_front".}
proc newImDrawCmd_reserve*(self: ptr ImVector_ImDrawCmd, new_capacity: int32): void {.imgui_lib, importc: "ImVector_ImDrawCmd_reserve".}
proc newImDrawCmd_resize*(self: ptr ImVector_ImDrawCmd, new_size: int32): void {.imgui_lib, importc: "ImVector_ImDrawCmd_resize".}
proc newImDrawCmd_size*(self: ptr ImVector_ImDrawCmd): int32 {.imgui_lib, importc: "ImVector_ImDrawCmd_size".}
proc newImDrawCmd_size_in_bytes*(self: ptr ImVector_ImDrawCmd): int32 {.imgui_lib, importc: "ImVector_ImDrawCmd_size_in_bytes".}
proc newImDrawCmd_swap*(self: ptr ImVector_ImDrawCmd, rhs: ImVector_ImDrawCmd): void {.imgui_lib, importc: "ImVector_ImDrawCmd_swap".}
proc newImDrawIdx_ImVector_ImDrawIdx*(): void {.imgui_lib, importc: "ImVector_ImDrawIdx_ImVector_ImDrawIdx".}
proc newImDrawIdx_grow_capacity*(self: ptr ImVector_ImDrawIdx, sz: int32): int32 {.imgui_lib, importc: "ImVector_ImDrawIdx__grow_capacity".}
proc newImDrawIdx_back*(self: ptr ImVector_ImDrawIdx): ptr ImDrawIdx {.imgui_lib, importc: "ImVector_ImDrawIdx_back".}
proc newImDrawIdx_begin*(self: ptr ImVector_ImDrawIdx): ptr ImDrawIdx {.imgui_lib, importc: "ImVector_ImDrawIdx_begin".}
proc newImDrawIdx_capacity*(self: ptr ImVector_ImDrawIdx): int32 {.imgui_lib, importc: "ImVector_ImDrawIdx_capacity".}
proc newImDrawIdx_clear*(self: ptr ImVector_ImDrawIdx): void {.imgui_lib, importc: "ImVector_ImDrawIdx_clear".}
proc newImDrawIdx_destroy*(self: ptr ImVector_ImDrawIdx): void {.imgui_lib, importc: "ImVector_ImDrawIdx_destroy".}
proc newImDrawIdx_empty*(self: ptr ImVector_ImDrawIdx): bool {.imgui_lib, importc: "ImVector_ImDrawIdx_empty".}
proc newImDrawIdx_end*(self: ptr ImVector_ImDrawIdx): ptr ImDrawIdx {.imgui_lib, importc: "ImVector_ImDrawIdx_end".}
proc newImDrawIdx_erase*(self: ptr ImVector_ImDrawIdx, it: ptr ImDrawIdx): ptr ImDrawIdx {.imgui_lib, importc: "ImVector_ImDrawIdx_erase".}
proc newImDrawIdx_erase_unsorted*(self: ptr ImVector_ImDrawIdx, it: ptr ImDrawIdx): ptr ImDrawIdx {.imgui_lib, importc: "ImVector_ImDrawIdx_erase_unsorted".}
proc newImDrawIdx_front*(self: ptr ImVector_ImDrawIdx): ptr ImDrawIdx {.imgui_lib, importc: "ImVector_ImDrawIdx_front".}
proc newImDrawIdx_index_from_ptr*(self: ptr ImVector_ImDrawIdx, it: ptr ImDrawIdx): int32 {.imgui_lib, importc: "ImVector_ImDrawIdx_index_from_ptr".}
proc newImDrawIdx_insert*(self: ptr ImVector_ImDrawIdx, it: ptr ImDrawIdx, v: ImDrawIdx): ptr ImDrawIdx {.imgui_lib, importc: "ImVector_ImDrawIdx_insert".}
proc newImDrawIdx_pop_back*(self: ptr ImVector_ImDrawIdx): void {.imgui_lib, importc: "ImVector_ImDrawIdx_pop_back".}
proc newImDrawIdx_push_back*(self: ptr ImVector_ImDrawIdx, v: ImDrawIdx): void {.imgui_lib, importc: "ImVector_ImDrawIdx_push_back".}
proc newImDrawIdx_push_front*(self: ptr ImVector_ImDrawIdx, v: ImDrawIdx): void {.imgui_lib, importc: "ImVector_ImDrawIdx_push_front".}
proc newImDrawIdx_reserve*(self: ptr ImVector_ImDrawIdx, new_capacity: int32): void {.imgui_lib, importc: "ImVector_ImDrawIdx_reserve".}
proc newImDrawIdx_resize*(self: ptr ImVector_ImDrawIdx, new_size: int32): void {.imgui_lib, importc: "ImVector_ImDrawIdx_resize".}
proc newImDrawIdx_size*(self: ptr ImVector_ImDrawIdx): int32 {.imgui_lib, importc: "ImVector_ImDrawIdx_size".}
proc newImDrawIdx_size_in_bytes*(self: ptr ImVector_ImDrawIdx): int32 {.imgui_lib, importc: "ImVector_ImDrawIdx_size_in_bytes".}
proc newImDrawIdx_swap*(self: ptr ImVector_ImDrawIdx, rhs: ImVector_ImDrawIdx): void {.imgui_lib, importc: "ImVector_ImDrawIdx_swap".}
proc newImDrawVert_ImVector_ImDrawVert*(): void {.imgui_lib, importc: "ImVector_ImDrawVert_ImVector_ImDrawVert".}
proc newImDrawVert_grow_capacity*(self: ptr ImVector_ImDrawVert, sz: int32): int32 {.imgui_lib, importc: "ImVector_ImDrawVert__grow_capacity".}
proc newImDrawVert_back*(self: ptr ImVector_ImDrawVert): ptr ImDrawVert {.imgui_lib, importc: "ImVector_ImDrawVert_back".}
proc newImDrawVert_begin*(self: ptr ImVector_ImDrawVert): ptr ImDrawVert {.imgui_lib, importc: "ImVector_ImDrawVert_begin".}
proc newImDrawVert_capacity*(self: ptr ImVector_ImDrawVert): int32 {.imgui_lib, importc: "ImVector_ImDrawVert_capacity".}
proc newImDrawVert_clear*(self: ptr ImVector_ImDrawVert): void {.imgui_lib, importc: "ImVector_ImDrawVert_clear".}
proc newImDrawVert_destroy*(self: ptr ImVector_ImDrawVert): void {.imgui_lib, importc: "ImVector_ImDrawVert_destroy".}
proc newImDrawVert_empty*(self: ptr ImVector_ImDrawVert): bool {.imgui_lib, importc: "ImVector_ImDrawVert_empty".}
proc newImDrawVert_end*(self: ptr ImVector_ImDrawVert): ptr ImDrawVert {.imgui_lib, importc: "ImVector_ImDrawVert_end".}
proc newImDrawVert_erase*(self: ptr ImVector_ImDrawVert, it: ptr ImDrawVert): ptr ImDrawVert {.imgui_lib, importc: "ImVector_ImDrawVert_erase".}
proc newImDrawVert_erase_unsorted*(self: ptr ImVector_ImDrawVert, it: ptr ImDrawVert): ptr ImDrawVert {.imgui_lib, importc: "ImVector_ImDrawVert_erase_unsorted".}
proc newImDrawVert_front*(self: ptr ImVector_ImDrawVert): ptr ImDrawVert {.imgui_lib, importc: "ImVector_ImDrawVert_front".}
proc newImDrawVert_index_from_ptr*(self: ptr ImVector_ImDrawVert, it: ptr ImDrawVert): int32 {.imgui_lib, importc: "ImVector_ImDrawVert_index_from_ptr".}
proc newImDrawVert_insert*(self: ptr ImVector_ImDrawVert, it: ptr ImDrawVert, v: ImDrawVert): ptr ImDrawVert {.imgui_lib, importc: "ImVector_ImDrawVert_insert".}
proc newImDrawVert_pop_back*(self: ptr ImVector_ImDrawVert): void {.imgui_lib, importc: "ImVector_ImDrawVert_pop_back".}
proc newImDrawVert_push_back*(self: ptr ImVector_ImDrawVert, v: ImDrawVert): void {.imgui_lib, importc: "ImVector_ImDrawVert_push_back".}
proc newImDrawVert_push_front*(self: ptr ImVector_ImDrawVert, v: ImDrawVert): void {.imgui_lib, importc: "ImVector_ImDrawVert_push_front".}
proc newImDrawVert_reserve*(self: ptr ImVector_ImDrawVert, new_capacity: int32): void {.imgui_lib, importc: "ImVector_ImDrawVert_reserve".}
proc newImDrawVert_resize*(self: ptr ImVector_ImDrawVert, new_size: int32): void {.imgui_lib, importc: "ImVector_ImDrawVert_resize".}
proc newImDrawVert_size*(self: ptr ImVector_ImDrawVert): int32 {.imgui_lib, importc: "ImVector_ImDrawVert_size".}
proc newImDrawVert_size_in_bytes*(self: ptr ImVector_ImDrawVert): int32 {.imgui_lib, importc: "ImVector_ImDrawVert_size_in_bytes".}
proc newImDrawVert_swap*(self: ptr ImVector_ImDrawVert, rhs: ImVector_ImDrawVert): void {.imgui_lib, importc: "ImVector_ImDrawVert_swap".}
proc newImFontConfig_ImVector_ImFontConfig*(): void {.imgui_lib, importc: "ImVector_ImFontConfig_ImVector_ImFontConfig".}
proc newImFontConfig_grow_capacity*(self: ptr ImVector_ImFontConfig, sz: int32): int32 {.imgui_lib, importc: "ImVector_ImFontConfig__grow_capacity".}
proc newImFontConfig_back*(self: ptr ImVector_ImFontConfig): ptr ImFontConfig {.imgui_lib, importc: "ImVector_ImFontConfig_back".}
proc newImFontConfig_begin*(self: ptr ImVector_ImFontConfig): ptr ImFontConfig {.imgui_lib, importc: "ImVector_ImFontConfig_begin".}
proc newImFontConfig_capacity*(self: ptr ImVector_ImFontConfig): int32 {.imgui_lib, importc: "ImVector_ImFontConfig_capacity".}
proc newImFontConfig_clear*(self: ptr ImVector_ImFontConfig): void {.imgui_lib, importc: "ImVector_ImFontConfig_clear".}
proc newImFontConfig_destroy*(self: ptr ImVector_ImFontConfig): void {.imgui_lib, importc: "ImVector_ImFontConfig_destroy".}
proc newImFontConfig_empty*(self: ptr ImVector_ImFontConfig): bool {.imgui_lib, importc: "ImVector_ImFontConfig_empty".}
proc newImFontConfig_end*(self: ptr ImVector_ImFontConfig): ptr ImFontConfig {.imgui_lib, importc: "ImVector_ImFontConfig_end".}
proc newImFontConfig_erase*(self: ptr ImVector_ImFontConfig, it: ptr ImFontConfig): ptr ImFontConfig {.imgui_lib, importc: "ImVector_ImFontConfig_erase".}
proc newImFontConfig_erase_unsorted*(self: ptr ImVector_ImFontConfig, it: ptr ImFontConfig): ptr ImFontConfig {.imgui_lib, importc: "ImVector_ImFontConfig_erase_unsorted".}
proc newImFontConfig_front*(self: ptr ImVector_ImFontConfig): ptr ImFontConfig {.imgui_lib, importc: "ImVector_ImFontConfig_front".}
proc newImFontConfig_index_from_ptr*(self: ptr ImVector_ImFontConfig, it: ptr ImFontConfig): int32 {.imgui_lib, importc: "ImVector_ImFontConfig_index_from_ptr".}
proc newImFontConfig_insert*(self: ptr ImVector_ImFontConfig, it: ptr ImFontConfig, v: ImFontConfig): ptr ImFontConfig {.imgui_lib, importc: "ImVector_ImFontConfig_insert".}
proc newImFontConfig_pop_back*(self: ptr ImVector_ImFontConfig): void {.imgui_lib, importc: "ImVector_ImFontConfig_pop_back".}
proc newImFontConfig_push_back*(self: ptr ImVector_ImFontConfig, v: ImFontConfig): void {.imgui_lib, importc: "ImVector_ImFontConfig_push_back".}
proc newImFontConfig_push_front*(self: ptr ImVector_ImFontConfig, v: ImFontConfig): void {.imgui_lib, importc: "ImVector_ImFontConfig_push_front".}
proc newImFontConfig_reserve*(self: ptr ImVector_ImFontConfig, new_capacity: int32): void {.imgui_lib, importc: "ImVector_ImFontConfig_reserve".}
proc newImFontConfig_resize*(self: ptr ImVector_ImFontConfig, new_size: int32): void {.imgui_lib, importc: "ImVector_ImFontConfig_resize".}
proc newImFontConfig_size*(self: ptr ImVector_ImFontConfig): int32 {.imgui_lib, importc: "ImVector_ImFontConfig_size".}
proc newImFontConfig_size_in_bytes*(self: ptr ImVector_ImFontConfig): int32 {.imgui_lib, importc: "ImVector_ImFontConfig_size_in_bytes".}
proc newImFontConfig_swap*(self: ptr ImVector_ImFontConfig, rhs: ImVector_ImFontConfig): void {.imgui_lib, importc: "ImVector_ImFontConfig_swap".}
proc newImFontGlyph_ImVector_ImFontGlyph*(): void {.imgui_lib, importc: "ImVector_ImFontGlyph_ImVector_ImFontGlyph".}
proc newImFontGlyph_grow_capacity*(self: ptr ImVector_ImFontGlyph, sz: int32): int32 {.imgui_lib, importc: "ImVector_ImFontGlyph__grow_capacity".}
proc newImFontGlyph_back*(self: ptr ImVector_ImFontGlyph): ptr ImFontGlyph {.imgui_lib, importc: "ImVector_ImFontGlyph_back".}
proc newImFontGlyph_begin*(self: ptr ImVector_ImFontGlyph): ptr ImFontGlyph {.imgui_lib, importc: "ImVector_ImFontGlyph_begin".}
proc newImFontGlyph_capacity*(self: ptr ImVector_ImFontGlyph): int32 {.imgui_lib, importc: "ImVector_ImFontGlyph_capacity".}
proc newImFontGlyph_clear*(self: ptr ImVector_ImFontGlyph): void {.imgui_lib, importc: "ImVector_ImFontGlyph_clear".}
proc newImFontGlyph_destroy*(self: ptr ImVector_ImFontGlyph): void {.imgui_lib, importc: "ImVector_ImFontGlyph_destroy".}
proc newImFontGlyph_empty*(self: ptr ImVector_ImFontGlyph): bool {.imgui_lib, importc: "ImVector_ImFontGlyph_empty".}
proc newImFontGlyph_end*(self: ptr ImVector_ImFontGlyph): ptr ImFontGlyph {.imgui_lib, importc: "ImVector_ImFontGlyph_end".}
proc newImFontGlyph_erase*(self: ptr ImVector_ImFontGlyph, it: ptr ImFontGlyph): ptr ImFontGlyph {.imgui_lib, importc: "ImVector_ImFontGlyph_erase".}
proc newImFontGlyph_erase_unsorted*(self: ptr ImVector_ImFontGlyph, it: ptr ImFontGlyph): ptr ImFontGlyph {.imgui_lib, importc: "ImVector_ImFontGlyph_erase_unsorted".}
proc newImFontGlyph_front*(self: ptr ImVector_ImFontGlyph): ptr ImFontGlyph {.imgui_lib, importc: "ImVector_ImFontGlyph_front".}
proc newImFontGlyph_index_from_ptr*(self: ptr ImVector_ImFontGlyph, it: ptr ImFontGlyph): int32 {.imgui_lib, importc: "ImVector_ImFontGlyph_index_from_ptr".}
proc newImFontGlyph_insert*(self: ptr ImVector_ImFontGlyph, it: ptr ImFontGlyph, v: ImFontGlyph): ptr ImFontGlyph {.imgui_lib, importc: "ImVector_ImFontGlyph_insert".}
proc newImFontGlyph_pop_back*(self: ptr ImVector_ImFontGlyph): void {.imgui_lib, importc: "ImVector_ImFontGlyph_pop_back".}
proc newImFontGlyph_push_back*(self: ptr ImVector_ImFontGlyph, v: ImFontGlyph): void {.imgui_lib, importc: "ImVector_ImFontGlyph_push_back".}
proc newImFontGlyph_push_front*(self: ptr ImVector_ImFontGlyph, v: ImFontGlyph): void {.imgui_lib, importc: "ImVector_ImFontGlyph_push_front".}
proc newImFontGlyph_reserve*(self: ptr ImVector_ImFontGlyph, new_capacity: int32): void {.imgui_lib, importc: "ImVector_ImFontGlyph_reserve".}
proc newImFontGlyph_resize*(self: ptr ImVector_ImFontGlyph, new_size: int32): void {.imgui_lib, importc: "ImVector_ImFontGlyph_resize".}
proc newImFontGlyph_size*(self: ptr ImVector_ImFontGlyph): int32 {.imgui_lib, importc: "ImVector_ImFontGlyph_size".}
proc newImFontGlyph_size_in_bytes*(self: ptr ImVector_ImFontGlyph): int32 {.imgui_lib, importc: "ImVector_ImFontGlyph_size_in_bytes".}
proc newImFontGlyph_swap*(self: ptr ImVector_ImFontGlyph, rhs: ImVector_ImFontGlyph): void {.imgui_lib, importc: "ImVector_ImFontGlyph_swap".}
proc newImFontPtr_ImVector_ImFontPtr*(): void {.imgui_lib, importc: "ImVector_ImFontPtr_ImVector_ImFontPtr".}
proc newImFontPtr_grow_capacity*(self: ptr ImVector_ImFontPtr, sz: int32): int32 {.imgui_lib, importc: "ImVector_ImFontPtr__grow_capacity".}
proc newImFontPtr_back*(self: ptr ImVector_ImFontPtr): ptr ptr ImFont {.imgui_lib, importc: "ImVector_ImFontPtr_back".}
proc newImFontPtr_begin*(self: ptr ImVector_ImFontPtr): ptr ptr ImFont {.imgui_lib, importc: "ImVector_ImFontPtr_begin".}
proc newImFontPtr_capacity*(self: ptr ImVector_ImFontPtr): int32 {.imgui_lib, importc: "ImVector_ImFontPtr_capacity".}
proc newImFontPtr_clear*(self: ptr ImVector_ImFontPtr): void {.imgui_lib, importc: "ImVector_ImFontPtr_clear".}
proc newImFontPtr_destroy*(self: ptr ImVector_ImFontPtr): void {.imgui_lib, importc: "ImVector_ImFontPtr_destroy".}
proc newImFontPtr_empty*(self: ptr ImVector_ImFontPtr): bool {.imgui_lib, importc: "ImVector_ImFontPtr_empty".}
proc newImFontPtr_end*(self: ptr ImVector_ImFontPtr): ptr ptr ImFont {.imgui_lib, importc: "ImVector_ImFontPtr_end".}
proc newImFontPtr_erase*(self: ptr ImVector_ImFontPtr, it: ptr ptr ImFont): ptr ptr ImFont {.imgui_lib, importc: "ImVector_ImFontPtr_erase".}
proc newImFontPtr_erase_unsorted*(self: ptr ImVector_ImFontPtr, it: ptr ptr ImFont): ptr ptr ImFont {.imgui_lib, importc: "ImVector_ImFontPtr_erase_unsorted".}
proc newImFontPtr_front*(self: ptr ImVector_ImFontPtr): ptr ptr ImFont {.imgui_lib, importc: "ImVector_ImFontPtr_front".}
proc newImFontPtr_index_from_ptr*(self: ptr ImVector_ImFontPtr, it: ptr ptr ImFont): int32 {.imgui_lib, importc: "ImVector_ImFontPtr_index_from_ptr".}
proc newImFontPtr_insert*(self: ptr ImVector_ImFontPtr, it: ptr ptr ImFont, v: ptr ImFont): ptr ptr ImFont {.imgui_lib, importc: "ImVector_ImFontPtr_insert".}
proc newImFontPtr_pop_back*(self: ptr ImVector_ImFontPtr): void {.imgui_lib, importc: "ImVector_ImFontPtr_pop_back".}
proc newImFontPtr_push_back*(self: ptr ImVector_ImFontPtr, v: ptr ImFont): void {.imgui_lib, importc: "ImVector_ImFontPtr_push_back".}
proc newImFontPtr_push_front*(self: ptr ImVector_ImFontPtr, v: ptr ImFont): void {.imgui_lib, importc: "ImVector_ImFontPtr_push_front".}
proc newImFontPtr_reserve*(self: ptr ImVector_ImFontPtr, new_capacity: int32): void {.imgui_lib, importc: "ImVector_ImFontPtr_reserve".}
proc newImFontPtr_resize*(self: ptr ImVector_ImFontPtr, new_size: int32): void {.imgui_lib, importc: "ImVector_ImFontPtr_resize".}
proc newImFontPtr_size*(self: ptr ImVector_ImFontPtr): int32 {.imgui_lib, importc: "ImVector_ImFontPtr_size".}
proc newImFontPtr_size_in_bytes*(self: ptr ImVector_ImFontPtr): int32 {.imgui_lib, importc: "ImVector_ImFontPtr_size_in_bytes".}
proc newImFontPtr_swap*(self: ptr ImVector_ImFontPtr, rhs: ImVector_ImFontPtr): void {.imgui_lib, importc: "ImVector_ImFontPtr_swap".}
proc newImTextureID_ImVector_ImTextureID*(): void {.imgui_lib, importc: "ImVector_ImTextureID_ImVector_ImTextureID".}
proc newImTextureID_grow_capacity*(self: ptr ImVector_ImTextureID, sz: int32): int32 {.imgui_lib, importc: "ImVector_ImTextureID__grow_capacity".}
proc newImTextureID_back*(self: ptr ImVector_ImTextureID): ptr ImTextureID {.imgui_lib, importc: "ImVector_ImTextureID_back".}
proc newImTextureID_begin*(self: ptr ImVector_ImTextureID): ptr ImTextureID {.imgui_lib, importc: "ImVector_ImTextureID_begin".}
proc newImTextureID_capacity*(self: ptr ImVector_ImTextureID): int32 {.imgui_lib, importc: "ImVector_ImTextureID_capacity".}
proc newImTextureID_clear*(self: ptr ImVector_ImTextureID): void {.imgui_lib, importc: "ImVector_ImTextureID_clear".}
proc newImTextureID_destroy*(self: ptr ImVector_ImTextureID): void {.imgui_lib, importc: "ImVector_ImTextureID_destroy".}
proc newImTextureID_empty*(self: ptr ImVector_ImTextureID): bool {.imgui_lib, importc: "ImVector_ImTextureID_empty".}
proc newImTextureID_end*(self: ptr ImVector_ImTextureID): ptr ImTextureID {.imgui_lib, importc: "ImVector_ImTextureID_end".}
proc newImTextureID_erase*(self: ptr ImVector_ImTextureID, it: ptr ImTextureID): ptr ImTextureID {.imgui_lib, importc: "ImVector_ImTextureID_erase".}
proc newImTextureID_erase_unsorted*(self: ptr ImVector_ImTextureID, it: ptr ImTextureID): ptr ImTextureID {.imgui_lib, importc: "ImVector_ImTextureID_erase_unsorted".}
proc newImTextureID_front*(self: ptr ImVector_ImTextureID): ptr ImTextureID {.imgui_lib, importc: "ImVector_ImTextureID_front".}
proc newImTextureID_index_from_ptr*(self: ptr ImVector_ImTextureID, it: ptr ImTextureID): int32 {.imgui_lib, importc: "ImVector_ImTextureID_index_from_ptr".}
proc newImTextureID_insert*(self: ptr ImVector_ImTextureID, it: ptr ImTextureID, v: ImTextureID): ptr ImTextureID {.imgui_lib, importc: "ImVector_ImTextureID_insert".}
proc newImTextureID_pop_back*(self: ptr ImVector_ImTextureID): void {.imgui_lib, importc: "ImVector_ImTextureID_pop_back".}
proc newImTextureID_push_back*(self: ptr ImVector_ImTextureID, v: ImTextureID): void {.imgui_lib, importc: "ImVector_ImTextureID_push_back".}
proc newImTextureID_push_front*(self: ptr ImVector_ImTextureID, v: ImTextureID): void {.imgui_lib, importc: "ImVector_ImTextureID_push_front".}
proc newImTextureID_reserve*(self: ptr ImVector_ImTextureID, new_capacity: int32): void {.imgui_lib, importc: "ImVector_ImTextureID_reserve".}
proc newImTextureID_resize*(self: ptr ImVector_ImTextureID, new_size: int32): void {.imgui_lib, importc: "ImVector_ImTextureID_resize".}
proc newImTextureID_size*(self: ptr ImVector_ImTextureID): int32 {.imgui_lib, importc: "ImVector_ImTextureID_size".}
proc newImTextureID_size_in_bytes*(self: ptr ImVector_ImTextureID): int32 {.imgui_lib, importc: "ImVector_ImTextureID_size_in_bytes".}
proc newImTextureID_swap*(self: ptr ImVector_ImTextureID, rhs: ImVector_ImTextureID): void {.imgui_lib, importc: "ImVector_ImTextureID_swap".}
proc newImVec2_ImVector_ImVec2*(): void {.imgui_lib, importc: "ImVector_ImVec2_ImVector_ImVec2".}
proc newImVec2_grow_capacity*(self: ptr ImVector_ImVec2, sz: int32): int32 {.imgui_lib, importc: "ImVector_ImVec2__grow_capacity".}
proc newImVec2_back*(self: ptr ImVector_ImVec2): ptr ImVec2 {.imgui_lib, importc: "ImVector_ImVec2_back".}
proc newImVec2_begin*(self: ptr ImVector_ImVec2): ptr ImVec2 {.imgui_lib, importc: "ImVector_ImVec2_begin".}
proc newImVec2_capacity*(self: ptr ImVector_ImVec2): int32 {.imgui_lib, importc: "ImVector_ImVec2_capacity".}
proc newImVec2_clear*(self: ptr ImVector_ImVec2): void {.imgui_lib, importc: "ImVector_ImVec2_clear".}
proc newImVec2_destroy*(self: ptr ImVector_ImVec2): void {.imgui_lib, importc: "ImVector_ImVec2_destroy".}
proc newImVec2_empty*(self: ptr ImVector_ImVec2): bool {.imgui_lib, importc: "ImVector_ImVec2_empty".}
proc newImVec2_end*(self: ptr ImVector_ImVec2): ptr ImVec2 {.imgui_lib, importc: "ImVector_ImVec2_end".}
proc newImVec2_erase*(self: ptr ImVector_ImVec2, it: ptr ImVec2): ptr ImVec2 {.imgui_lib, importc: "ImVector_ImVec2_erase".}
proc newImVec2_erase_unsorted*(self: ptr ImVector_ImVec2, it: ptr ImVec2): ptr ImVec2 {.imgui_lib, importc: "ImVector_ImVec2_erase_unsorted".}
proc newImVec2_front*(self: ptr ImVector_ImVec2): ptr ImVec2 {.imgui_lib, importc: "ImVector_ImVec2_front".}
proc newImVec2_index_from_ptr*(self: ptr ImVector_ImVec2, it: ptr ImVec2): int32 {.imgui_lib, importc: "ImVector_ImVec2_index_from_ptr".}
proc newImVec2_insert*(self: ptr ImVector_ImVec2, it: ptr ImVec2, v: ImVec2): ptr ImVec2 {.imgui_lib, importc: "ImVector_ImVec2_insert".}
proc newImVec2_pop_back*(self: ptr ImVector_ImVec2): void {.imgui_lib, importc: "ImVector_ImVec2_pop_back".}
proc newImVec2_push_back*(self: ptr ImVector_ImVec2, v: ImVec2): void {.imgui_lib, importc: "ImVector_ImVec2_push_back".}
proc newImVec2_push_front*(self: ptr ImVector_ImVec2, v: ImVec2): void {.imgui_lib, importc: "ImVector_ImVec2_push_front".}
proc newImVec2_reserve*(self: ptr ImVector_ImVec2, new_capacity: int32): void {.imgui_lib, importc: "ImVector_ImVec2_reserve".}
proc newImVec2_resize*(self: ptr ImVector_ImVec2, new_size: int32): void {.imgui_lib, importc: "ImVector_ImVec2_resize".}
proc newImVec2_size*(self: ptr ImVector_ImVec2): int32 {.imgui_lib, importc: "ImVector_ImVec2_size".}
proc newImVec2_size_in_bytes*(self: ptr ImVector_ImVec2): int32 {.imgui_lib, importc: "ImVector_ImVec2_size_in_bytes".}
proc newImVec2_swap*(self: ptr ImVector_ImVec2, rhs: ImVector_ImVec2): void {.imgui_lib, importc: "ImVector_ImVec2_swap".}
proc newImVec4_ImVector_ImVec4*(): void {.imgui_lib, importc: "ImVector_ImVec4_ImVector_ImVec4".}
proc newImVec4_grow_capacity*(self: ptr ImVector_ImVec4, sz: int32): int32 {.imgui_lib, importc: "ImVector_ImVec4__grow_capacity".}
proc newImVec4_back*(self: ptr ImVector_ImVec4): ptr ImVec4 {.imgui_lib, importc: "ImVector_ImVec4_back".}
proc newImVec4_begin*(self: ptr ImVector_ImVec4): ptr ImVec4 {.imgui_lib, importc: "ImVector_ImVec4_begin".}
proc newImVec4_capacity*(self: ptr ImVector_ImVec4): int32 {.imgui_lib, importc: "ImVector_ImVec4_capacity".}
proc newImVec4_clear*(self: ptr ImVector_ImVec4): void {.imgui_lib, importc: "ImVector_ImVec4_clear".}
proc newImVec4_destroy*(self: ptr ImVector_ImVec4): void {.imgui_lib, importc: "ImVector_ImVec4_destroy".}
proc newImVec4_empty*(self: ptr ImVector_ImVec4): bool {.imgui_lib, importc: "ImVector_ImVec4_empty".}
proc newImVec4_end*(self: ptr ImVector_ImVec4): ptr ImVec4 {.imgui_lib, importc: "ImVector_ImVec4_end".}
proc newImVec4_erase*(self: ptr ImVector_ImVec4, it: ptr ImVec4): ptr ImVec4 {.imgui_lib, importc: "ImVector_ImVec4_erase".}
proc newImVec4_erase_unsorted*(self: ptr ImVector_ImVec4, it: ptr ImVec4): ptr ImVec4 {.imgui_lib, importc: "ImVector_ImVec4_erase_unsorted".}
proc newImVec4_front*(self: ptr ImVector_ImVec4): ptr ImVec4 {.imgui_lib, importc: "ImVector_ImVec4_front".}
proc newImVec4_index_from_ptr*(self: ptr ImVector_ImVec4, it: ptr ImVec4): int32 {.imgui_lib, importc: "ImVector_ImVec4_index_from_ptr".}
proc newImVec4_insert*(self: ptr ImVector_ImVec4, it: ptr ImVec4, v: ImVec4): ptr ImVec4 {.imgui_lib, importc: "ImVector_ImVec4_insert".}
proc newImVec4_pop_back*(self: ptr ImVector_ImVec4): void {.imgui_lib, importc: "ImVector_ImVec4_pop_back".}
proc newImVec4_push_back*(self: ptr ImVector_ImVec4, v: ImVec4): void {.imgui_lib, importc: "ImVector_ImVec4_push_back".}
proc newImVec4_push_front*(self: ptr ImVector_ImVec4, v: ImVec4): void {.imgui_lib, importc: "ImVector_ImVec4_push_front".}
proc newImVec4_reserve*(self: ptr ImVector_ImVec4, new_capacity: int32): void {.imgui_lib, importc: "ImVector_ImVec4_reserve".}
proc newImVec4_resize*(self: ptr ImVector_ImVec4, new_size: int32): void {.imgui_lib, importc: "ImVector_ImVec4_resize".}
proc newImVec4_size*(self: ptr ImVector_ImVec4): int32 {.imgui_lib, importc: "ImVector_ImVec4_size".}
proc newImVec4_size_in_bytes*(self: ptr ImVector_ImVec4): int32 {.imgui_lib, importc: "ImVector_ImVec4_size_in_bytes".}
proc newImVec4_swap*(self: ptr ImVector_ImVec4, rhs: ImVector_ImVec4): void {.imgui_lib, importc: "ImVector_ImVec4_swap".}
proc newImVector*(): void {.imgui_lib, importc: "ImVector_ImVector".}
proc newImWchar_ImVector_ImWchar*(): void {.imgui_lib, importc: "ImVector_ImWchar_ImVector_ImWchar".}
proc newImWchar_grow_capacity*(self: ptr ImVector_ImWchar, sz: int32): int32 {.imgui_lib, importc: "ImVector_ImWchar__grow_capacity".}
proc newImWchar_back*(self: ptr ImVector_ImWchar): ptr ImWchar {.imgui_lib, importc: "ImVector_ImWchar_back".}
proc newImWchar_begin*(self: ptr ImVector_ImWchar): ptr ImWchar {.imgui_lib, importc: "ImVector_ImWchar_begin".}
proc newImWchar_capacity*(self: ptr ImVector_ImWchar): int32 {.imgui_lib, importc: "ImVector_ImWchar_capacity".}
proc newImWchar_clear*(self: ptr ImVector_ImWchar): void {.imgui_lib, importc: "ImVector_ImWchar_clear".}
proc newImWchar_contains*(self: ptr ImVector_ImWchar, v: ImWchar): bool {.imgui_lib, importc: "ImVector_ImWchar_contains".}
proc newImWchar_destroy*(self: ptr ImVector_ImWchar): void {.imgui_lib, importc: "ImVector_ImWchar_destroy".}
proc newImWchar_empty*(self: ptr ImVector_ImWchar): bool {.imgui_lib, importc: "ImVector_ImWchar_empty".}
proc newImWchar_end*(self: ptr ImVector_ImWchar): ptr ImWchar {.imgui_lib, importc: "ImVector_ImWchar_end".}
proc newImWchar_erase*(self: ptr ImVector_ImWchar, it: ptr ImWchar): ptr ImWchar {.imgui_lib, importc: "ImVector_ImWchar_erase".}
proc newImWchar_erase_unsorted*(self: ptr ImVector_ImWchar, it: ptr ImWchar): ptr ImWchar {.imgui_lib, importc: "ImVector_ImWchar_erase_unsorted".}
proc newImWchar_front*(self: ptr ImVector_ImWchar): ptr ImWchar {.imgui_lib, importc: "ImVector_ImWchar_front".}
proc newImWchar_index_from_ptr*(self: ptr ImVector_ImWchar, it: ptr ImWchar): int32 {.imgui_lib, importc: "ImVector_ImWchar_index_from_ptr".}
proc newImWchar_insert*(self: ptr ImVector_ImWchar, it: ptr ImWchar, v: ImWchar): ptr ImWchar {.imgui_lib, importc: "ImVector_ImWchar_insert".}
proc newImWchar_pop_back*(self: ptr ImVector_ImWchar): void {.imgui_lib, importc: "ImVector_ImWchar_pop_back".}
proc newImWchar_push_back*(self: ptr ImVector_ImWchar, v: ImWchar): void {.imgui_lib, importc: "ImVector_ImWchar_push_back".}
proc newImWchar_push_front*(self: ptr ImVector_ImWchar, v: ImWchar): void {.imgui_lib, importc: "ImVector_ImWchar_push_front".}
proc newImWchar_reserve*(self: ptr ImVector_ImWchar, new_capacity: int32): void {.imgui_lib, importc: "ImVector_ImWchar_reserve".}
proc newImWchar_resize*(self: ptr ImVector_ImWchar, new_size: int32): void {.imgui_lib, importc: "ImVector_ImWchar_resize".}
proc newImWchar_size*(self: ptr ImVector_ImWchar): int32 {.imgui_lib, importc: "ImVector_ImWchar_size".}
proc newImWchar_size_in_bytes*(self: ptr ImVector_ImWchar): int32 {.imgui_lib, importc: "ImVector_ImWchar_size_in_bytes".}
proc newImWchar_swap*(self: ptr ImVector_ImWchar, rhs: ImVector_ImWchar): void {.imgui_lib, importc: "ImVector_ImWchar_swap".}
proc pair_ImVector_Pair*(): void {.imgui_lib, importc: "ImVector_Pair_ImVector_Pair".}
proc pair_grow_capacity*(self: ptr ImVector_Pair, sz: int32): int32 {.imgui_lib, importc: "ImVector_Pair__grow_capacity".}
proc pair_back*(self: ptr ImVector_Pair): ptr Pair {.imgui_lib, importc: "ImVector_Pair_back".}
proc pair_begin*(self: ptr ImVector_Pair): ptr Pair {.imgui_lib, importc: "ImVector_Pair_begin".}
proc pair_capacity*(self: ptr ImVector_Pair): int32 {.imgui_lib, importc: "ImVector_Pair_capacity".}
proc pair_clear*(self: ptr ImVector_Pair): void {.imgui_lib, importc: "ImVector_Pair_clear".}
proc pair_destroy*(self: ptr ImVector_Pair): void {.imgui_lib, importc: "ImVector_Pair_destroy".}
proc pair_empty*(self: ptr ImVector_Pair): bool {.imgui_lib, importc: "ImVector_Pair_empty".}
proc pair_end*(self: ptr ImVector_Pair): ptr Pair {.imgui_lib, importc: "ImVector_Pair_end".}
proc pair_erase*(self: ptr ImVector_Pair, it: ptr Pair): ptr Pair {.imgui_lib, importc: "ImVector_Pair_erase".}
proc pair_erase_unsorted*(self: ptr ImVector_Pair, it: ptr Pair): ptr Pair {.imgui_lib, importc: "ImVector_Pair_erase_unsorted".}
proc pair_front*(self: ptr ImVector_Pair): ptr Pair {.imgui_lib, importc: "ImVector_Pair_front".}
proc pair_index_from_ptr*(self: ptr ImVector_Pair, it: ptr Pair): int32 {.imgui_lib, importc: "ImVector_Pair_index_from_ptr".}
proc pair_insert*(self: ptr ImVector_Pair, it: ptr Pair, v: Pair): ptr Pair {.imgui_lib, importc: "ImVector_Pair_insert".}
proc pair_pop_back*(self: ptr ImVector_Pair): void {.imgui_lib, importc: "ImVector_Pair_pop_back".}
proc pair_push_back*(self: ptr ImVector_Pair, v: Pair): void {.imgui_lib, importc: "ImVector_Pair_push_back".}
proc pair_push_front*(self: ptr ImVector_Pair, v: Pair): void {.imgui_lib, importc: "ImVector_Pair_push_front".}
proc pair_reserve*(self: ptr ImVector_Pair, new_capacity: int32): void {.imgui_lib, importc: "ImVector_Pair_reserve".}
proc pair_resize*(self: ptr ImVector_Pair, new_size: int32): void {.imgui_lib, importc: "ImVector_Pair_resize".}
proc pair_size*(self: ptr ImVector_Pair): int32 {.imgui_lib, importc: "ImVector_Pair_size".}
proc pair_size_in_bytes*(self: ptr ImVector_Pair): int32 {.imgui_lib, importc: "ImVector_Pair_size_in_bytes".}
proc pair_swap*(self: ptr ImVector_Pair, rhs: ImVector_Pair): void {.imgui_lib, importc: "ImVector_Pair_swap".}
proc textRange_ImVector_TextRange*(): void {.imgui_lib, importc: "ImVector_TextRange_ImVector_TextRange".}
proc textRange_grow_capacity*(self: ptr ImVector_TextRange, sz: int32): int32 {.imgui_lib, importc: "ImVector_TextRange__grow_capacity".}
proc textRange_back*(self: ptr ImVector_TextRange): ptr TextRange {.imgui_lib, importc: "ImVector_TextRange_back".}
proc textRange_begin*(self: ptr ImVector_TextRange): ptr TextRange {.imgui_lib, importc: "ImVector_TextRange_begin".}
proc textRange_capacity*(self: ptr ImVector_TextRange): int32 {.imgui_lib, importc: "ImVector_TextRange_capacity".}
proc textRange_clear*(self: ptr ImVector_TextRange): void {.imgui_lib, importc: "ImVector_TextRange_clear".}
proc textRange_destroy*(self: ptr ImVector_TextRange): void {.imgui_lib, importc: "ImVector_TextRange_destroy".}
proc textRange_empty*(self: ptr ImVector_TextRange): bool {.imgui_lib, importc: "ImVector_TextRange_empty".}
proc textRange_end*(self: ptr ImVector_TextRange): ptr TextRange {.imgui_lib, importc: "ImVector_TextRange_end".}
proc textRange_erase*(self: ptr ImVector_TextRange, it: ptr TextRange): ptr TextRange {.imgui_lib, importc: "ImVector_TextRange_erase".}
proc textRange_erase_unsorted*(self: ptr ImVector_TextRange, it: ptr TextRange): ptr TextRange {.imgui_lib, importc: "ImVector_TextRange_erase_unsorted".}
proc textRange_front*(self: ptr ImVector_TextRange): ptr TextRange {.imgui_lib, importc: "ImVector_TextRange_front".}
proc textRange_index_from_ptr*(self: ptr ImVector_TextRange, it: ptr TextRange): int32 {.imgui_lib, importc: "ImVector_TextRange_index_from_ptr".}
proc textRange_insert*(self: ptr ImVector_TextRange, it: ptr TextRange, v: TextRange): ptr TextRange {.imgui_lib, importc: "ImVector_TextRange_insert".}
proc textRange_pop_back*(self: ptr ImVector_TextRange): void {.imgui_lib, importc: "ImVector_TextRange_pop_back".}
proc textRange_push_back*(self: ptr ImVector_TextRange, v: TextRange): void {.imgui_lib, importc: "ImVector_TextRange_push_back".}
proc textRange_push_front*(self: ptr ImVector_TextRange, v: TextRange): void {.imgui_lib, importc: "ImVector_TextRange_push_front".}
proc textRange_reserve*(self: ptr ImVector_TextRange, new_capacity: int32): void {.imgui_lib, importc: "ImVector_TextRange_reserve".}
proc textRange_resize*(self: ptr ImVector_TextRange, new_size: int32): void {.imgui_lib, importc: "ImVector_TextRange_resize".}
proc textRange_size*(self: ptr ImVector_TextRange): int32 {.imgui_lib, importc: "ImVector_TextRange_size".}
proc textRange_size_in_bytes*(self: ptr ImVector_TextRange): int32 {.imgui_lib, importc: "ImVector_TextRange_size_in_bytes".}
proc textRange_swap*(self: ptr ImVector_TextRange, rhs: ImVector_TextRange): void {.imgui_lib, importc: "ImVector_TextRange_swap".}
proc grow_capacity*(self: ptr ImVector, sz: int32): int32 {.imgui_lib, importc: "ImVector__grow_capacity".}
proc back*(self: ptr ImVector): pointer {.imgui_lib, importc: "ImVector_back".}
proc begin*(self: ptr ImVector): pointer {.imgui_lib, importc: "ImVector_begin".}
proc capacity*(self: ptr ImVector): int32 {.imgui_lib, importc: "ImVector_capacity".}
proc char_ImVector_char*(): void {.imgui_lib, importc: "ImVector_char_ImVector_char".}
proc char_grow_capacity*(self: ptr ImVector_char, sz: int32): int32 {.imgui_lib, importc: "ImVector_char__grow_capacity".}
proc char_back*(self: ptr ImVector_char): cstring {.imgui_lib, importc: "ImVector_char_back".}
proc char_begin*(self: ptr ImVector_char): cstring {.imgui_lib, importc: "ImVector_char_begin".}
proc char_capacity*(self: ptr ImVector_char): int32 {.imgui_lib, importc: "ImVector_char_capacity".}
proc char_clear*(self: ptr ImVector_char): void {.imgui_lib, importc: "ImVector_char_clear".}
proc char_contains*(self: ptr ImVector_char, v: char): bool {.imgui_lib, importc: "ImVector_char_contains".}
proc char_destroy*(self: ptr ImVector_char): void {.imgui_lib, importc: "ImVector_char_destroy".}
proc char_empty*(self: ptr ImVector_char): bool {.imgui_lib, importc: "ImVector_char_empty".}
proc char_end*(self: ptr ImVector_char): cstring {.imgui_lib, importc: "ImVector_char_end".}
proc char_erase*(self: ptr ImVector_char, it: ptr char): cstring {.imgui_lib, importc: "ImVector_char_erase".}
proc char_erase_unsorted*(self: ptr ImVector_char, it: ptr char): cstring {.imgui_lib, importc: "ImVector_char_erase_unsorted".}
proc char_front*(self: ptr ImVector_char): cstring {.imgui_lib, importc: "ImVector_char_front".}
proc char_index_from_ptr*(self: ptr ImVector_char, it: ptr char): int32 {.imgui_lib, importc: "ImVector_char_index_from_ptr".}
proc char_insert*(self: ptr ImVector_char, it: ptr char, v: char): cstring {.imgui_lib, importc: "ImVector_char_insert".}
proc char_pop_back*(self: ptr ImVector_char): void {.imgui_lib, importc: "ImVector_char_pop_back".}
proc char_push_back*(self: ptr ImVector_char, v: char): void {.imgui_lib, importc: "ImVector_char_push_back".}
proc char_push_front*(self: ptr ImVector_char, v: char): void {.imgui_lib, importc: "ImVector_char_push_front".}
proc char_reserve*(self: ptr ImVector_char, new_capacity: int32): void {.imgui_lib, importc: "ImVector_char_reserve".}
proc char_resize*(self: ptr ImVector_char, new_size: int32): void {.imgui_lib, importc: "ImVector_char_resize".}
proc char_size*(self: ptr ImVector_char): int32 {.imgui_lib, importc: "ImVector_char_size".}
proc char_size_in_bytes*(self: ptr ImVector_char): int32 {.imgui_lib, importc: "ImVector_char_size_in_bytes".}
proc char_swap*(self: ptr ImVector_char, rhs: ImVector_char): void {.imgui_lib, importc: "ImVector_char_swap".}
proc clear*(self: ptr ImVector): void {.imgui_lib, importc: "ImVector_clear".}
proc destroy*(self: ptr ImVector): void {.imgui_lib, importc: "ImVector_destroy".}
proc empty*(self: ptr ImVector): bool {.imgui_lib, importc: "ImVector_empty".}
proc igEnd*(self: ptr ImVector): pointer {.imgui_lib, importc: "ImVector_end".}
proc erase*(self: ptr ImVector, it: pointer): pointer {.imgui_lib, importc: "ImVector_erase".}
proc erase_unsorted*(self: ptr ImVector, it: pointer): pointer {.imgui_lib, importc: "ImVector_erase_unsorted".}
proc float_ImVector_float*(): void {.imgui_lib, importc: "ImVector_float_ImVector_float".}
proc float_grow_capacity*(self: ptr ImVector_float, sz: int32): int32 {.imgui_lib, importc: "ImVector_float__grow_capacity".}
proc float_back*(self: ptr ImVector_float): ptr float32 {.imgui_lib, importc: "ImVector_float_back".}
proc float_begin*(self: ptr ImVector_float): ptr float32 {.imgui_lib, importc: "ImVector_float_begin".}
proc float_capacity*(self: ptr ImVector_float): int32 {.imgui_lib, importc: "ImVector_float_capacity".}
proc float_clear*(self: ptr ImVector_float): void {.imgui_lib, importc: "ImVector_float_clear".}
proc float_contains*(self: ptr ImVector_float, v: float32): bool {.imgui_lib, importc: "ImVector_float_contains".}
proc float_destroy*(self: ptr ImVector_float): void {.imgui_lib, importc: "ImVector_float_destroy".}
proc float_empty*(self: ptr ImVector_float): bool {.imgui_lib, importc: "ImVector_float_empty".}
proc float_end*(self: ptr ImVector_float): ptr float32 {.imgui_lib, importc: "ImVector_float_end".}
proc float_erase*(self: ptr ImVector_float, it: ptr float): ptr float32 {.imgui_lib, importc: "ImVector_float_erase".}
proc float_erase_unsorted*(self: ptr ImVector_float, it: ptr float): ptr float32 {.imgui_lib, importc: "ImVector_float_erase_unsorted".}
proc float_front*(self: ptr ImVector_float): ptr float32 {.imgui_lib, importc: "ImVector_float_front".}
proc float_index_from_ptr*(self: ptr ImVector_float, it: ptr float): int32 {.imgui_lib, importc: "ImVector_float_index_from_ptr".}
proc float_insert*(self: ptr ImVector_float, it: ptr float, v: float32): ptr float32 {.imgui_lib, importc: "ImVector_float_insert".}
proc float_pop_back*(self: ptr ImVector_float): void {.imgui_lib, importc: "ImVector_float_pop_back".}
proc float_push_back*(self: ptr ImVector_float, v: float32): void {.imgui_lib, importc: "ImVector_float_push_back".}
proc float_push_front*(self: ptr ImVector_float, v: float32): void {.imgui_lib, importc: "ImVector_float_push_front".}
proc float_reserve*(self: ptr ImVector_float, new_capacity: int32): void {.imgui_lib, importc: "ImVector_float_reserve".}
proc float_resize*(self: ptr ImVector_float, new_size: int32): void {.imgui_lib, importc: "ImVector_float_resize".}
proc float_size*(self: ptr ImVector_float): int32 {.imgui_lib, importc: "ImVector_float_size".}
proc float_size_in_bytes*(self: ptr ImVector_float): int32 {.imgui_lib, importc: "ImVector_float_size_in_bytes".}
proc float_swap*(self: ptr ImVector_float, rhs: ImVector_float): void {.imgui_lib, importc: "ImVector_float_swap".}
proc front*(self: ptr ImVector): pointer {.imgui_lib, importc: "ImVector_front".}
proc index_from_ptr*(self: ptr ImVector, it: pointer): int32 {.imgui_lib, importc: "ImVector_index_from_ptr".}
proc insert*(self: ptr ImVector, it: pointer, v: ImVector): pointer {.imgui_lib, importc: "ImVector_insert".}
proc int_ImVector_int*(): void {.imgui_lib, importc: "ImVector_int_ImVector_int".}
proc int_grow_capacity*(self: ptr ImVector_int, sz: int32): int32 {.imgui_lib, importc: "ImVector_int__grow_capacity".}
proc int_back*(self: ptr ImVector_int): ptr int32 {.imgui_lib, importc: "ImVector_int_back".}
proc int_begin*(self: ptr ImVector_int): ptr int32 {.imgui_lib, importc: "ImVector_int_begin".}
proc int_capacity*(self: ptr ImVector_int): int32 {.imgui_lib, importc: "ImVector_int_capacity".}
proc int_clear*(self: ptr ImVector_int): void {.imgui_lib, importc: "ImVector_int_clear".}
proc int_contains*(self: ptr ImVector_int, v: int32): bool {.imgui_lib, importc: "ImVector_int_contains".}
proc int_destroy*(self: ptr ImVector_int): void {.imgui_lib, importc: "ImVector_int_destroy".}
proc int_empty*(self: ptr ImVector_int): bool {.imgui_lib, importc: "ImVector_int_empty".}
proc int_end*(self: ptr ImVector_int): ptr int32 {.imgui_lib, importc: "ImVector_int_end".}
proc int_erase*(self: ptr ImVector_int, it: ptr int): ptr int32 {.imgui_lib, importc: "ImVector_int_erase".}
proc int_erase_unsorted*(self: ptr ImVector_int, it: ptr int): ptr int32 {.imgui_lib, importc: "ImVector_int_erase_unsorted".}
proc int_front*(self: ptr ImVector_int): ptr int32 {.imgui_lib, importc: "ImVector_int_front".}
proc int_index_from_ptr*(self: ptr ImVector_int, it: ptr int): int32 {.imgui_lib, importc: "ImVector_int_index_from_ptr".}
proc int_insert*(self: ptr ImVector_int, it: ptr int, v: int32): ptr int32 {.imgui_lib, importc: "ImVector_int_insert".}
proc int_pop_back*(self: ptr ImVector_int): void {.imgui_lib, importc: "ImVector_int_pop_back".}
proc int_push_back*(self: ptr ImVector_int, v: int32): void {.imgui_lib, importc: "ImVector_int_push_back".}
proc int_push_front*(self: ptr ImVector_int, v: int32): void {.imgui_lib, importc: "ImVector_int_push_front".}
proc int_reserve*(self: ptr ImVector_int, new_capacity: int32): void {.imgui_lib, importc: "ImVector_int_reserve".}
proc int_resize*(self: ptr ImVector_int, new_size: int32): void {.imgui_lib, importc: "ImVector_int_resize".}
proc int_size*(self: ptr ImVector_int): int32 {.imgui_lib, importc: "ImVector_int_size".}
proc int_size_in_bytes*(self: ptr ImVector_int): int32 {.imgui_lib, importc: "ImVector_int_size_in_bytes".}
proc int_swap*(self: ptr ImVector_int, rhs: ImVector_int): void {.imgui_lib, importc: "ImVector_int_swap".}
proc pop_back*(self: ptr ImVector): void {.imgui_lib, importc: "ImVector_pop_back".}
proc push_back*(self: ptr ImVector, v: ImVector): void {.imgui_lib, importc: "ImVector_push_back".}
proc push_front*(self: ptr ImVector, v: ImVector): void {.imgui_lib, importc: "ImVector_push_front".}
proc reserve*(self: ptr ImVector, new_capacity: int32): void {.imgui_lib, importc: "ImVector_reserve".}
proc resize*(self: ptr ImVector, new_size: int32): void {.imgui_lib, importc: "ImVector_resize".}
proc size*(self: ptr ImVector): int32 {.imgui_lib, importc: "ImVector_size".}
proc size_in_bytes*(self: ptr ImVector): int32 {.imgui_lib, importc: "ImVector_size_in_bytes".}
proc swap*(self: ptr ImVector, rhs: ImVector): void {.imgui_lib, importc: "ImVector_swap".}
proc pair_Pair*(key: ImGuiID, val_i: int32): void {.imgui_lib, importc: "Pair_Pair".}
proc pair_destroy*(self: ptr Pair): void {.imgui_lib, importc: "Pair_destroy".}
proc textRange_TextRange*(): void {.imgui_lib, importc: "TextRange_TextRange".}
proc textRange_begin*(self: ptr TextRange): cstring {.imgui_lib, importc: "TextRange_begin".}
proc textRange_destroy*(self: ptr TextRange): void {.imgui_lib, importc: "TextRange_destroy".}
proc textRange_empty*(self: ptr TextRange): bool {.imgui_lib, importc: "TextRange_empty".}
proc textRange_end*(self: ptr TextRange): cstring {.imgui_lib, importc: "TextRange_end".}
proc textRange_split*(self: ptr TextRange, separator: char, `out`: ptr ImVector_TextRange): void {.imgui_lib, importc: "TextRange_split".}
proc igAcceptDragDropPayload*(`type`: cstring, flags: ImGuiDragDropFlags = 0): ptr ImGuiPayload {.imgui_lib, importc: "igAcceptDragDropPayload".}
proc igAlignTextToFramePadding*(): void {.imgui_lib, importc: "igAlignTextToFramePadding".}
proc igArrowButton*(str_id: cstring, dir: ImGuiDir): bool {.imgui_lib, importc: "igArrowButton".}
proc igBegin*(name: cstring, p_open: ptr bool = nil, flags: ImGuiWindowFlags = 0): bool {.imgui_lib, importc: "igBegin".}
proc igBeginChild*(str_id: cstring, size: ImVec2, border: bool = false, flags: ImGuiWindowFlags = 0): bool {.imgui_lib, importc: "igBeginChild".}
proc igBeginChildFrame*(id: ImGuiID, size: ImVec2, flags: ImGuiWindowFlags = 0): bool {.imgui_lib, importc: "igBeginChildFrame".}
proc igBeginCombo*(label: cstring, preview_value: cstring, flags: ImGuiComboFlags = 0): bool {.imgui_lib, importc: "igBeginCombo".}
proc igBeginDragDropSource*(flags: ImGuiDragDropFlags = 0): bool {.imgui_lib, importc: "igBeginDragDropSource".}
proc igBeginDragDropTarget*(): bool {.imgui_lib, importc: "igBeginDragDropTarget".}
proc igBeginGroup*(): void {.imgui_lib, importc: "igBeginGroup".}
proc igBeginMainMenuBar*(): bool {.imgui_lib, importc: "igBeginMainMenuBar".}
proc igBeginMenu*(label: cstring, enabled: bool = true): bool {.imgui_lib, importc: "igBeginMenu".}
proc igBeginMenuBar*(): bool {.imgui_lib, importc: "igBeginMenuBar".}
proc igBeginPopup*(str_id: cstring, flags: ImGuiWindowFlags = 0): bool {.imgui_lib, importc: "igBeginPopup".}
proc igBeginPopupContextItem*(str_id: cstring = nil, mouse_button: int32 = 1): bool {.imgui_lib, importc: "igBeginPopupContextItem".}
proc igBeginPopupContextVoid*(str_id: cstring = nil, mouse_button: int32 = 1): bool {.imgui_lib, importc: "igBeginPopupContextVoid".}
proc igBeginPopupContextWindow*(str_id: cstring = nil, mouse_button: int32 = 1, also_over_items: bool = true): bool {.imgui_lib, importc: "igBeginPopupContextWindow".}
proc igBeginPopupModal*(name: cstring, p_open: ptr bool = nil, flags: ImGuiWindowFlags = 0): bool {.imgui_lib, importc: "igBeginPopupModal".}
proc igBeginTabBar*(str_id: cstring, flags: ImGuiTabBarFlags = 0): bool {.imgui_lib, importc: "igBeginTabBar".}
proc igBeginTabItem*(label: cstring, p_open: ptr bool = nil, flags: ImGuiTabItemFlags = 0): bool {.imgui_lib, importc: "igBeginTabItem".}
proc igBeginTooltip*(): void {.imgui_lib, importc: "igBeginTooltip".}
proc igBullet*(): void {.imgui_lib, importc: "igBullet".}
proc igBulletText*(fmt: cstring): void {.imgui_lib, importc: "igBulletText", varargs.}
proc igBulletTextV*(fmt: cstring): void {.imgui_lib, importc: "igBulletTextV", varargs.}
proc igButton*(label: cstring, size: ImVec2): bool {.imgui_lib, importc: "igButton".}
proc igCalcItemWidth*(): float32 {.imgui_lib, importc: "igCalcItemWidth".}
proc igCalcListClipping*(items_count: int32, items_height: float32, out_items_display_start: ptr int32, out_items_display_end: ptr int32): void {.imgui_lib, importc: "igCalcListClipping".}
proc igCalcTextSize*(text: cstring, text_end: cstring = nil, hide_text_after_double_hash: bool = false, wrap_width: float32 = -1.0f): ImVec2 {.imgui_lib, importc: "igCalcTextSize".}
proc igCaptureKeyboardFromApp*(want_capture_keyboard_value: bool = true): void {.imgui_lib, importc: "igCaptureKeyboardFromApp".}
proc igCaptureMouseFromApp*(want_capture_mouse_value: bool = true): void {.imgui_lib, importc: "igCaptureMouseFromApp".}
proc igCheckbox*(label: cstring, v: ptr bool): bool {.imgui_lib, importc: "igCheckbox".}
proc igCheckboxFlags*(label: cstring, flags: ptr uint32, flags_value: uint32): bool {.imgui_lib, importc: "igCheckboxFlags".}
proc igCloseCurrentPopup*(): void {.imgui_lib, importc: "igCloseCurrentPopup".}
proc igCollapsingHeader*(label: cstring, flags: ImGuiTreeNodeFlags = 0): bool {.imgui_lib, importc: "igCollapsingHeader".}
proc igColorButton*(desc_id: cstring, col: ImVec4, flags: ImGuiColorEditFlags = 0, size: ImVec2): bool {.imgui_lib, importc: "igColorButton".}
proc igColorConvertFloat4ToU32*(`in`: ImVec4): ImU32 {.imgui_lib, importc: "igColorConvertFloat4ToU32".}
proc igColorConvertHSVtoRGB*(h: float32, s: float32, v: float32, out_r: float32, out_g: float32, out_b: float32): void {.imgui_lib, importc: "igColorConvertHSVtoRGB".}
proc igColorConvertRGBtoHSV*(r: float32, g: float32, b: float32, out_h: float32, out_s: float32, out_v: float32): void {.imgui_lib, importc: "igColorConvertRGBtoHSV".}
proc igColorConvertU32ToFloat4*(`in`: ImU32): ImVec4 {.imgui_lib, importc: "igColorConvertU32ToFloat4".}
proc igColorEdit3*(label: cstring, col: ptr float, flags: ImGuiColorEditFlags = 0): bool {.imgui_lib, importc: "igColorEdit3".}
proc igColorEdit4*(label: cstring, col: ptr float, flags: ImGuiColorEditFlags = 0): bool {.imgui_lib, importc: "igColorEdit4".}
proc igColorPicker3*(label: cstring, col: ptr float, flags: ImGuiColorEditFlags = 0): bool {.imgui_lib, importc: "igColorPicker3".}
proc igColorPicker4*(label: cstring, col: ptr float, flags: ImGuiColorEditFlags = 0, ref_col: ptr float32 = nil): bool {.imgui_lib, importc: "igColorPicker4".}
proc igColumns*(count: int32 = 1, id: cstring = nil, border: bool = true): void {.imgui_lib, importc: "igColumns".}
proc igCombo*(label: cstring, current_item: ptr int32, items: ptr ptr char, items_count: int32, popup_max_height_in_items: int32 = -1): bool {.imgui_lib, importc: "igCombo".}
proc igCreateContext*(shared_font_atlas: ptr ImFontAtlas = nil): ptr ImGuiContext {.imgui_lib, importc: "igCreateContext".}
proc igDebugCheckVersionAndDataLayout*(version_str: cstring, sz_io: uint32, sz_style: uint32, sz_vec2: uint32, sz_vec4: uint32, sz_drawvert: uint32, sz_drawidx: uint32): bool {.imgui_lib, importc: "igDebugCheckVersionAndDataLayout".}
proc igDestroyContext*(ctx: ptr ImGuiContext = nil): void {.imgui_lib, importc: "igDestroyContext".}
proc igDragFloat*(label: cstring, v: ptr float32, v_speed: float32 = 1.0f, v_min: float32 = 0.0f, v_max: float32 = 0.0f, format: cstring = "%.3f", power: float32 = 1.0f): bool {.imgui_lib, importc: "igDragFloat".}
proc igDragFloat2*(label: cstring, v: ptr float, v_speed: float32 = 1.0f, v_min: float32 = 0.0f, v_max: float32 = 0.0f, format: cstring = "%.3f", power: float32 = 1.0f): bool {.imgui_lib, importc: "igDragFloat2".}
proc igDragFloat3*(label: cstring, v: ptr float, v_speed: float32 = 1.0f, v_min: float32 = 0.0f, v_max: float32 = 0.0f, format: cstring = "%.3f", power: float32 = 1.0f): bool {.imgui_lib, importc: "igDragFloat3".}
proc igDragFloat4*(label: cstring, v: ptr float, v_speed: float32 = 1.0f, v_min: float32 = 0.0f, v_max: float32 = 0.0f, format: cstring = "%.3f", power: float32 = 1.0f): bool {.imgui_lib, importc: "igDragFloat4".}
proc igDragFloatRange2*(label: cstring, v_current_min: ptr float32, v_current_max: ptr float32, v_speed: float32 = 1.0f, v_min: float32 = 0.0f, v_max: float32 = 0.0f, format: cstring = "%.3f", format_max: cstring = nil, power: float32 = 1.0f): bool {.imgui_lib, importc: "igDragFloatRange2".}
proc igDragInt*(label: cstring, v: ptr int32, v_speed: float32 = 1.0f, v_min: int32 = 0, v_max: int32 = 0, format: cstring = "%d"): bool {.imgui_lib, importc: "igDragInt".}
proc igDragInt2*(label: cstring, v: ptr int, v_speed: float32 = 1.0f, v_min: int32 = 0, v_max: int32 = 0, format: cstring = "%d"): bool {.imgui_lib, importc: "igDragInt2".}
proc igDragInt3*(label: cstring, v: ptr int, v_speed: float32 = 1.0f, v_min: int32 = 0, v_max: int32 = 0, format: cstring = "%d"): bool {.imgui_lib, importc: "igDragInt3".}
proc igDragInt4*(label: cstring, v: ptr int, v_speed: float32 = 1.0f, v_min: int32 = 0, v_max: int32 = 0, format: cstring = "%d"): bool {.imgui_lib, importc: "igDragInt4".}
proc igDragIntRange2*(label: cstring, v_current_min: ptr int32, v_current_max: ptr int32, v_speed: float32 = 1.0f, v_min: int32 = 0, v_max: int32 = 0, format: cstring = "%d", format_max: cstring = nil): bool {.imgui_lib, importc: "igDragIntRange2".}
proc igDragScalar*(label: cstring, data_type: ImGuiDataType, v: pointer, v_speed: float32, v_min: pointer = nil, v_max: pointer = nil, format: cstring = nil, power: float32 = 1.0f): bool {.imgui_lib, importc: "igDragScalar".}
proc igDragScalarN*(label: cstring, data_type: ImGuiDataType, v: pointer, components: int32, v_speed: float32, v_min: pointer = nil, v_max: pointer = nil, format: cstring = nil, power: float32 = 1.0f): bool {.imgui_lib, importc: "igDragScalarN".}
proc igDummy*(size: ImVec2): void {.imgui_lib, importc: "igDummy".}
proc igEnd*(): void {.imgui_lib, importc: "igEnd".}
proc igEndChild*(): void {.imgui_lib, importc: "igEndChild".}
proc igEndChildFrame*(): void {.imgui_lib, importc: "igEndChildFrame".}
proc igEndCombo*(): void {.imgui_lib, importc: "igEndCombo".}
proc igEndDragDropSource*(): void {.imgui_lib, importc: "igEndDragDropSource".}
proc igEndDragDropTarget*(): void {.imgui_lib, importc: "igEndDragDropTarget".}
proc igEndFrame*(): void {.imgui_lib, importc: "igEndFrame".}
proc igEndGroup*(): void {.imgui_lib, importc: "igEndGroup".}
proc igEndMainMenuBar*(): void {.imgui_lib, importc: "igEndMainMenuBar".}
proc igEndMenu*(): void {.imgui_lib, importc: "igEndMenu".}
proc igEndMenuBar*(): void {.imgui_lib, importc: "igEndMenuBar".}
proc igEndPopup*(): void {.imgui_lib, importc: "igEndPopup".}
proc igEndTabBar*(): void {.imgui_lib, importc: "igEndTabBar".}
proc igEndTabItem*(): void {.imgui_lib, importc: "igEndTabItem".}
proc igEndTooltip*(): void {.imgui_lib, importc: "igEndTooltip".}
proc igGetBackgroundDrawList*(): ptr ImDrawList {.imgui_lib, importc: "igGetBackgroundDrawList".}
proc igGetClipboardText*(): cstring {.imgui_lib, importc: "igGetClipboardText".}
proc igGetColorU32*(idx: ImGuiCol, alpha_mul: float32 = 1.0f): ImU32 {.imgui_lib, importc: "igGetColorU32".}
proc igGetColumnIndex*(): int32 {.imgui_lib, importc: "igGetColumnIndex".}
proc igGetColumnOffset*(column_index: int32 = -1): float32 {.imgui_lib, importc: "igGetColumnOffset".}
proc igGetColumnWidth*(column_index: int32 = -1): float32 {.imgui_lib, importc: "igGetColumnWidth".}
proc igGetColumnsCount*(): int32 {.imgui_lib, importc: "igGetColumnsCount".}
proc igGetContentRegionAvail*(): ImVec2 {.imgui_lib, importc: "igGetContentRegionAvail".}
proc igGetContentRegionMax*(): ImVec2 {.imgui_lib, importc: "igGetContentRegionMax".}
proc igGetCurrentContext*(): ptr ImGuiContext {.imgui_lib, importc: "igGetCurrentContext".}
proc igGetCursorPos*(): ImVec2 {.imgui_lib, importc: "igGetCursorPos".}
proc igGetCursorPosX*(): float32 {.imgui_lib, importc: "igGetCursorPosX".}
proc igGetCursorPosY*(): float32 {.imgui_lib, importc: "igGetCursorPosY".}
proc igGetCursorScreenPos*(): ImVec2 {.imgui_lib, importc: "igGetCursorScreenPos".}
proc igGetCursorStartPos*(): ImVec2 {.imgui_lib, importc: "igGetCursorStartPos".}
proc igGetDragDropPayload*(): ptr ImGuiPayload {.imgui_lib, importc: "igGetDragDropPayload".}
proc igGetDrawData*(): ptr ImDrawData {.imgui_lib, importc: "igGetDrawData".}
proc igGetDrawListSharedData*(): ptr ImDrawListSharedData {.imgui_lib, importc: "igGetDrawListSharedData".}
proc igGetFont*(): ptr ImFont {.imgui_lib, importc: "igGetFont".}
proc igGetFontSize*(): float32 {.imgui_lib, importc: "igGetFontSize".}
proc igGetFontTexUvWhitePixel*(): ImVec2 {.imgui_lib, importc: "igGetFontTexUvWhitePixel".}
proc igGetForegroundDrawList*(): ptr ImDrawList {.imgui_lib, importc: "igGetForegroundDrawList".}
proc igGetFrameCount*(): int32 {.imgui_lib, importc: "igGetFrameCount".}
proc igGetFrameHeight*(): float32 {.imgui_lib, importc: "igGetFrameHeight".}
proc igGetFrameHeightWithSpacing*(): float32 {.imgui_lib, importc: "igGetFrameHeightWithSpacing".}
proc igGetID*(str_id: cstring): ImGuiID {.imgui_lib, importc: "igGetID".}
proc igGetIO*(): ptr ImGuiIO {.imgui_lib, importc: "igGetIO".}
proc igGetItemRectMax*(): ImVec2 {.imgui_lib, importc: "igGetItemRectMax".}
proc igGetItemRectMin*(): ImVec2 {.imgui_lib, importc: "igGetItemRectMin".}
proc igGetItemRectSize*(): ImVec2 {.imgui_lib, importc: "igGetItemRectSize".}
proc igGetKeyIndex*(imgui_key: ImGuiKey): int32 {.imgui_lib, importc: "igGetKeyIndex".}
proc igGetKeyPressedAmount*(key_index: int32, repeat_delay: float32, rate: float32): int32 {.imgui_lib, importc: "igGetKeyPressedAmount".}
proc igGetMouseCursor*(): ImGuiMouseCursor {.imgui_lib, importc: "igGetMouseCursor".}
proc igGetMouseDragDelta*(button: int32 = 0, lock_threshold: float32 = -1.0f): ImVec2 {.imgui_lib, importc: "igGetMouseDragDelta".}
proc igGetMousePos*(): ImVec2 {.imgui_lib, importc: "igGetMousePos".}
proc igGetMousePosOnOpeningCurrentPopup*(): ImVec2 {.imgui_lib, importc: "igGetMousePosOnOpeningCurrentPopup".}
proc igGetScrollMaxX*(): float32 {.imgui_lib, importc: "igGetScrollMaxX".}
proc igGetScrollMaxY*(): float32 {.imgui_lib, importc: "igGetScrollMaxY".}
proc igGetScrollX*(): float32 {.imgui_lib, importc: "igGetScrollX".}
proc igGetScrollY*(): float32 {.imgui_lib, importc: "igGetScrollY".}
proc igGetStateStorage*(): ptr ImGuiStorage {.imgui_lib, importc: "igGetStateStorage".}
proc igGetStyle*(): ptr ImGuiStyle {.imgui_lib, importc: "igGetStyle".}
proc igGetStyleColorName*(idx: ImGuiCol): cstring {.imgui_lib, importc: "igGetStyleColorName".}
proc igGetStyleColorVec4*(idx: ImGuiCol): ptr ImVec4 {.imgui_lib, importc: "igGetStyleColorVec4".}
proc igGetTextLineHeight*(): float32 {.imgui_lib, importc: "igGetTextLineHeight".}
proc igGetTextLineHeightWithSpacing*(): float32 {.imgui_lib, importc: "igGetTextLineHeightWithSpacing".}
proc igGetTime*(): float64 {.imgui_lib, importc: "igGetTime".}
proc igGetTreeNodeToLabelSpacing*(): float32 {.imgui_lib, importc: "igGetTreeNodeToLabelSpacing".}
proc igGetVersion*(): cstring {.imgui_lib, importc: "igGetVersion".}
proc igGetWindowContentRegionMax*(): ImVec2 {.imgui_lib, importc: "igGetWindowContentRegionMax".}
proc igGetWindowContentRegionMin*(): ImVec2 {.imgui_lib, importc: "igGetWindowContentRegionMin".}
proc igGetWindowContentRegionWidth*(): float32 {.imgui_lib, importc: "igGetWindowContentRegionWidth".}
proc igGetWindowDrawList*(): ptr ImDrawList {.imgui_lib, importc: "igGetWindowDrawList".}
proc igGetWindowHeight*(): float32 {.imgui_lib, importc: "igGetWindowHeight".}
proc igGetWindowPos*(): ImVec2 {.imgui_lib, importc: "igGetWindowPos".}
proc igGetWindowSize*(): ImVec2 {.imgui_lib, importc: "igGetWindowSize".}
proc igGetWindowWidth*(): float32 {.imgui_lib, importc: "igGetWindowWidth".}
proc igImage*(user_texture_id: ImTextureID, size: ImVec2, uv0: ImVec2, uv1: ImVec2, tint_col: ImVec4, border_col: ImVec4): void {.imgui_lib, importc: "igImage".}
proc igImageButton*(user_texture_id: ImTextureID, size: ImVec2, uv0: ImVec2, uv1: ImVec2, frame_padding: int32 = -1, bg_col: ImVec4, tint_col: ImVec4): bool {.imgui_lib, importc: "igImageButton".}
proc igIndent*(indent_w: float32 = 0.0f): void {.imgui_lib, importc: "igIndent".}
proc igInputDouble*(label: cstring, v: ptr float64, step: float64 = 0.0, step_fast: float64 = 0.0, format: cstring = "%.6f", flags: ImGuiInputTextFlags = 0): bool {.imgui_lib, importc: "igInputDouble".}
proc igInputFloat*(label: cstring, v: ptr float32, step: float32 = 0.0f, step_fast: float32 = 0.0f, format: cstring = "%.3f", flags: ImGuiInputTextFlags = 0): bool {.imgui_lib, importc: "igInputFloat".}
proc igInputFloat2*(label: cstring, v: ptr float, format: cstring = "%.3f", flags: ImGuiInputTextFlags = 0): bool {.imgui_lib, importc: "igInputFloat2".}
proc igInputFloat3*(label: cstring, v: ptr float, format: cstring = "%.3f", flags: ImGuiInputTextFlags = 0): bool {.imgui_lib, importc: "igInputFloat3".}
proc igInputFloat4*(label: cstring, v: ptr float, format: cstring = "%.3f", flags: ImGuiInputTextFlags = 0): bool {.imgui_lib, importc: "igInputFloat4".}
proc igInputInt*(label: cstring, v: ptr int32, step: int32 = 1, step_fast: int32 = 100, flags: ImGuiInputTextFlags = 0): bool {.imgui_lib, importc: "igInputInt".}
proc igInputInt2*(label: cstring, v: ptr int, flags: ImGuiInputTextFlags = 0): bool {.imgui_lib, importc: "igInputInt2".}
proc igInputInt3*(label: cstring, v: ptr int, flags: ImGuiInputTextFlags = 0): bool {.imgui_lib, importc: "igInputInt3".}
proc igInputInt4*(label: cstring, v: ptr int, flags: ImGuiInputTextFlags = 0): bool {.imgui_lib, importc: "igInputInt4".}
proc igInputScalar*(label: cstring, data_type: ImGuiDataType, v: pointer, step: pointer = nil, step_fast: pointer = nil, format: cstring = nil, flags: ImGuiInputTextFlags = 0): bool {.imgui_lib, importc: "igInputScalar".}
proc igInputScalarN*(label: cstring, data_type: ImGuiDataType, v: pointer, components: int32, step: pointer = nil, step_fast: pointer = nil, format: cstring = nil, flags: ImGuiInputTextFlags = 0): bool {.imgui_lib, importc: "igInputScalarN".}
proc igInputText*(label: cstring, buf: cstring, buf_size: uint32, flags: ImGuiInputTextFlags = 0, callback: ImGuiInputTextCallback = nil, user_data: pointer = nil): bool {.imgui_lib, importc: "igInputText".}
proc igInputTextMultiline*(label: cstring, buf: cstring, buf_size: uint32, size: ImVec2, flags: ImGuiInputTextFlags = 0, callback: ImGuiInputTextCallback = nil, user_data: pointer = nil): bool {.imgui_lib, importc: "igInputTextMultiline".}
proc igInputTextWithHint*(label: cstring, hint: cstring, buf: cstring, buf_size: uint32, flags: ImGuiInputTextFlags = 0, callback: ImGuiInputTextCallback = nil, user_data: pointer = nil): bool {.imgui_lib, importc: "igInputTextWithHint".}
proc igInvisibleButton*(str_id: cstring, size: ImVec2): bool {.imgui_lib, importc: "igInvisibleButton".}
proc igIsAnyItemActive*(): bool {.imgui_lib, importc: "igIsAnyItemActive".}
proc igIsAnyItemFocused*(): bool {.imgui_lib, importc: "igIsAnyItemFocused".}
proc igIsAnyItemHovered*(): bool {.imgui_lib, importc: "igIsAnyItemHovered".}
proc igIsAnyMouseDown*(): bool {.imgui_lib, importc: "igIsAnyMouseDown".}
proc igIsItemActivated*(): bool {.imgui_lib, importc: "igIsItemActivated".}
proc igIsItemActive*(): bool {.imgui_lib, importc: "igIsItemActive".}
proc igIsItemClicked*(mouse_button: int32 = 0): bool {.imgui_lib, importc: "igIsItemClicked".}
proc igIsItemDeactivated*(): bool {.imgui_lib, importc: "igIsItemDeactivated".}
proc igIsItemDeactivatedAfterEdit*(): bool {.imgui_lib, importc: "igIsItemDeactivatedAfterEdit".}
proc igIsItemEdited*(): bool {.imgui_lib, importc: "igIsItemEdited".}
proc igIsItemFocused*(): bool {.imgui_lib, importc: "igIsItemFocused".}
proc igIsItemHovered*(flags: ImGuiHoveredFlags = 0): bool {.imgui_lib, importc: "igIsItemHovered".}
proc igIsItemVisible*(): bool {.imgui_lib, importc: "igIsItemVisible".}
proc igIsKeyDown*(user_key_index: int32): bool {.imgui_lib, importc: "igIsKeyDown".}
proc igIsKeyPressed*(user_key_index: int32, repeat: bool = true): bool {.imgui_lib, importc: "igIsKeyPressed".}
proc igIsKeyReleased*(user_key_index: int32): bool {.imgui_lib, importc: "igIsKeyReleased".}
proc igIsMouseClicked*(button: int32, repeat: bool = false): bool {.imgui_lib, importc: "igIsMouseClicked".}
proc igIsMouseDoubleClicked*(button: int32): bool {.imgui_lib, importc: "igIsMouseDoubleClicked".}
proc igIsMouseDown*(button: int32): bool {.imgui_lib, importc: "igIsMouseDown".}
proc igIsMouseDragging*(button: int32 = 0, lock_threshold: float32 = -1.0f): bool {.imgui_lib, importc: "igIsMouseDragging".}
proc igIsMouseHoveringRect*(r_min: ImVec2, r_max: ImVec2, clip: bool = true): bool {.imgui_lib, importc: "igIsMouseHoveringRect".}
proc igIsMousePosValid*(mouse_pos: ptr ImVec2 = nil): bool {.imgui_lib, importc: "igIsMousePosValid".}
proc igIsMouseReleased*(button: int32): bool {.imgui_lib, importc: "igIsMouseReleased".}
proc igIsPopupOpen*(str_id: cstring): bool {.imgui_lib, importc: "igIsPopupOpen".}
proc igIsRectVisible*(size: ImVec2): bool {.imgui_lib, importc: "igIsRectVisible".}
proc igIsWindowAppearing*(): bool {.imgui_lib, importc: "igIsWindowAppearing".}
proc igIsWindowCollapsed*(): bool {.imgui_lib, importc: "igIsWindowCollapsed".}
proc igIsWindowFocused*(flags: ImGuiFocusedFlags = 0): bool {.imgui_lib, importc: "igIsWindowFocused".}
proc igIsWindowHovered*(flags: ImGuiHoveredFlags = 0): bool {.imgui_lib, importc: "igIsWindowHovered".}
proc igLabelText*(label: cstring, fmt: cstring): void {.imgui_lib, importc: "igLabelText", varargs.}
proc igLabelTextV*(label: cstring, fmt: cstring): void {.imgui_lib, importc: "igLabelTextV", varargs.}
proc igListBox*(label: cstring, current_item: ptr int32, items: ptr ptr char, items_count: int32, height_in_items: int32 = -1): bool {.imgui_lib, importc: "igListBox".}
proc igListBoxFooter*(): void {.imgui_lib, importc: "igListBoxFooter".}
proc igListBoxHeader*(label: cstring, size: ImVec2): bool {.imgui_lib, importc: "igListBoxHeader".}
proc igLoadIniSettingsFromDisk*(ini_filename: cstring): void {.imgui_lib, importc: "igLoadIniSettingsFromDisk".}
proc igLoadIniSettingsFromMemory*(ini_data: cstring, ini_size: uint32 = 0): void {.imgui_lib, importc: "igLoadIniSettingsFromMemory".}
proc igLogButtons*(): void {.imgui_lib, importc: "igLogButtons".}
proc igLogFinish*(): void {.imgui_lib, importc: "igLogFinish".}
proc igLogText*(fmt: cstring): void {.imgui_lib, importc: "igLogText", varargs.}
proc igLogToClipboard*(auto_open_depth: int32 = -1): void {.imgui_lib, importc: "igLogToClipboard".}
proc igLogToFile*(auto_open_depth: int32 = -1, filename: cstring = nil): void {.imgui_lib, importc: "igLogToFile".}
proc igLogToTTY*(auto_open_depth: int32 = -1): void {.imgui_lib, importc: "igLogToTTY".}
proc igMemAlloc*(size: uint32): pointer {.imgui_lib, importc: "igMemAlloc".}
proc igMemFree*(`ptr`: pointer): void {.imgui_lib, importc: "igMemFree".}
proc igMenuItem*(label: cstring, shortcut: cstring = nil, selected: bool = false, enabled: bool = true): bool {.imgui_lib, importc: "igMenuItem".}
proc igNewFrame*(): void {.imgui_lib, importc: "igNewFrame".}
proc igNewLine*(): void {.imgui_lib, importc: "igNewLine".}
proc igNextColumn*(): void {.imgui_lib, importc: "igNextColumn".}
proc igOpenPopup*(str_id: cstring): void {.imgui_lib, importc: "igOpenPopup".}
proc igOpenPopupOnItemClick*(str_id: cstring = nil, mouse_button: int32 = 1): bool {.imgui_lib, importc: "igOpenPopupOnItemClick".}
proc igPlotHistogram*(label: cstring, values: ptr float32, values_count: int32, values_offset: int32 = 0, overlay_text: cstring = nil, scale_min: float32, scale_max: float32, graph_size: ImVec2, stride: int32): void {.imgui_lib, importc: "igPlotHistogram".}
proc igPlotLines*(label: cstring, values: ptr float32, values_count: int32, values_offset: int32 = 0, overlay_text: cstring = nil, scale_min: float32, scale_max: float32, graph_size: ImVec2, stride: int32): void {.imgui_lib, importc: "igPlotLines".}
proc igPopAllowKeyboardFocus*(): void {.imgui_lib, importc: "igPopAllowKeyboardFocus".}
proc igPopButtonRepeat*(): void {.imgui_lib, importc: "igPopButtonRepeat".}
proc igPopClipRect*(): void {.imgui_lib, importc: "igPopClipRect".}
proc igPopFont*(): void {.imgui_lib, importc: "igPopFont".}
proc igPopID*(): void {.imgui_lib, importc: "igPopID".}
proc igPopItemWidth*(): void {.imgui_lib, importc: "igPopItemWidth".}
proc igPopStyleColor*(count: int32 = 1): void {.imgui_lib, importc: "igPopStyleColor".}
proc igPopStyleVar*(count: int32 = 1): void {.imgui_lib, importc: "igPopStyleVar".}
proc igPopTextWrapPos*(): void {.imgui_lib, importc: "igPopTextWrapPos".}
proc igProgressBar*(fraction: float32, size_arg: ImVec2, overlay: cstring = nil): void {.imgui_lib, importc: "igProgressBar".}
proc igPushAllowKeyboardFocus*(allow_keyboard_focus: bool): void {.imgui_lib, importc: "igPushAllowKeyboardFocus".}
proc igPushButtonRepeat*(repeat: bool): void {.imgui_lib, importc: "igPushButtonRepeat".}
proc igPushClipRect*(clip_rect_min: ImVec2, clip_rect_max: ImVec2, intersect_with_current_clip_rect: bool): void {.imgui_lib, importc: "igPushClipRect".}
proc igPushFont*(font: ptr ImFont): void {.imgui_lib, importc: "igPushFont".}
proc igPushID*(str_id: cstring): void {.imgui_lib, importc: "igPushID".}
proc igPushItemWidth*(item_width: float32): void {.imgui_lib, importc: "igPushItemWidth".}
proc igPushStyleColor*(idx: ImGuiCol, col: ImU32): void {.imgui_lib, importc: "igPushStyleColor".}
proc igPushStyleVar*(idx: ImGuiStyleVar, val: float32): void {.imgui_lib, importc: "igPushStyleVar".}
proc igPushTextWrapPos*(wrap_local_pos_x: float32 = 0.0f): void {.imgui_lib, importc: "igPushTextWrapPos".}
proc igRadioButton*(label: cstring, active: bool): bool {.imgui_lib, importc: "igRadioButton".}
proc igRender*(): void {.imgui_lib, importc: "igRender".}
proc igResetMouseDragDelta*(button: int32 = 0): void {.imgui_lib, importc: "igResetMouseDragDelta".}
proc igSameLine*(offset_from_start_x: float32 = 0.0f, spacing: float32 = -1.0f): void {.imgui_lib, importc: "igSameLine".}
proc igSaveIniSettingsToDisk*(ini_filename: cstring): void {.imgui_lib, importc: "igSaveIniSettingsToDisk".}
proc igSaveIniSettingsToMemory*(out_ini_size: ptr uint32 = nil): cstring {.imgui_lib, importc: "igSaveIniSettingsToMemory".}
proc igSelectable*(label: cstring, selected: bool = false, flags: ImGuiSelectableFlags = 0, size: ImVec2): bool {.imgui_lib, importc: "igSelectable".}
proc igSeparator*(): void {.imgui_lib, importc: "igSeparator".}
proc igSetClipboardText*(text: cstring): void {.imgui_lib, importc: "igSetClipboardText".}
proc igSetColorEditOptions*(flags: ImGuiColorEditFlags): void {.imgui_lib, importc: "igSetColorEditOptions".}
proc igSetColumnOffset*(column_index: int32, offset_x: float32): void {.imgui_lib, importc: "igSetColumnOffset".}
proc igSetColumnWidth*(column_index: int32, width: float32): void {.imgui_lib, importc: "igSetColumnWidth".}
proc igSetCurrentContext*(ctx: ptr ImGuiContext): void {.imgui_lib, importc: "igSetCurrentContext".}
proc igSetCursorPos*(local_pos: ImVec2): void {.imgui_lib, importc: "igSetCursorPos".}
proc igSetCursorPosX*(local_x: float32): void {.imgui_lib, importc: "igSetCursorPosX".}
proc igSetCursorPosY*(local_y: float32): void {.imgui_lib, importc: "igSetCursorPosY".}
proc igSetCursorScreenPos*(pos: ImVec2): void {.imgui_lib, importc: "igSetCursorScreenPos".}
proc igSetDragDropPayload*(`type`: cstring, data: pointer, sz: uint32, cond: ImGuiCond = 0): bool {.imgui_lib, importc: "igSetDragDropPayload".}
proc igSetItemAllowOverlap*(): void {.imgui_lib, importc: "igSetItemAllowOverlap".}
proc igSetItemDefaultFocus*(): void {.imgui_lib, importc: "igSetItemDefaultFocus".}
proc igSetKeyboardFocusHere*(offset: int32 = 0): void {.imgui_lib, importc: "igSetKeyboardFocusHere".}
proc igSetMouseCursor*(`type`: ImGuiMouseCursor): void {.imgui_lib, importc: "igSetMouseCursor".}
proc igSetNextItemWidth*(item_width: float32): void {.imgui_lib, importc: "igSetNextItemWidth".}
proc igSetNextTreeNodeOpen*(is_open: bool, cond: ImGuiCond = 0): void {.imgui_lib, importc: "igSetNextTreeNodeOpen".}
proc igSetNextWindowBgAlpha*(alpha: float32): void {.imgui_lib, importc: "igSetNextWindowBgAlpha".}
proc igSetNextWindowCollapsed*(collapsed: bool, cond: ImGuiCond = 0): void {.imgui_lib, importc: "igSetNextWindowCollapsed".}
proc igSetNextWindowContentSize*(size: ImVec2): void {.imgui_lib, importc: "igSetNextWindowContentSize".}
proc igSetNextWindowFocus*(): void {.imgui_lib, importc: "igSetNextWindowFocus".}
proc igSetNextWindowPos*(pos: ImVec2, cond: ImGuiCond = 0, pivot: ImVec2): void {.imgui_lib, importc: "igSetNextWindowPos".}
proc igSetNextWindowSize*(size: ImVec2, cond: ImGuiCond = 0): void {.imgui_lib, importc: "igSetNextWindowSize".}
proc igSetNextWindowSizeConstraints*(size_min: ImVec2, size_max: ImVec2, custom_callback: ImGuiSizeCallback = nil, custom_callback_data: pointer = nil): void {.imgui_lib, importc: "igSetNextWindowSizeConstraints".}
proc igSetScrollFromPosY*(local_y: float32, center_y_ratio: float32 = 0.5f): void {.imgui_lib, importc: "igSetScrollFromPosY".}
proc igSetScrollHereY*(center_y_ratio: float32 = 0.5f): void {.imgui_lib, importc: "igSetScrollHereY".}
proc igSetScrollX*(scroll_x: float32): void {.imgui_lib, importc: "igSetScrollX".}
proc igSetScrollY*(scroll_y: float32): void {.imgui_lib, importc: "igSetScrollY".}
proc igSetStateStorage*(storage: ptr ImGuiStorage): void {.imgui_lib, importc: "igSetStateStorage".}
proc igSetTabItemClosed*(tab_or_docked_window_label: cstring): void {.imgui_lib, importc: "igSetTabItemClosed".}
proc igSetTooltip*(fmt: cstring): void {.imgui_lib, importc: "igSetTooltip", varargs.}
proc igSetTooltipV*(fmt: cstring): void {.imgui_lib, importc: "igSetTooltipV", varargs.}
proc igSetWindowCollapsed*(collapsed: bool, cond: ImGuiCond = 0): void {.imgui_lib, importc: "igSetWindowCollapsed".}
proc igSetWindowFocus*(): void {.imgui_lib, importc: "igSetWindowFocus".}
proc igSetWindowFontScale*(scale: float32): void {.imgui_lib, importc: "igSetWindowFontScale".}
proc igSetWindowPos*(pos: ImVec2, cond: ImGuiCond = 0): void {.imgui_lib, importc: "igSetWindowPos".}
proc igSetWindowSize*(size: ImVec2, cond: ImGuiCond = 0): void {.imgui_lib, importc: "igSetWindowSize".}
proc igShowAboutWindow*(p_open: ptr bool = nil): void {.imgui_lib, importc: "igShowAboutWindow".}
proc igShowDemoWindow*(p_open: ptr bool = nil): void {.imgui_lib, importc: "igShowDemoWindow".}
proc igShowFontSelector*(label: cstring): void {.imgui_lib, importc: "igShowFontSelector".}
proc igShowMetricsWindow*(p_open: ptr bool = nil): void {.imgui_lib, importc: "igShowMetricsWindow".}
proc igShowStyleEditor*(`ref`: ptr ImGuiStyle): void {.imgui_lib, importc: "igShowStyleEditor".}
proc igShowStyleSelector*(label: cstring): bool {.imgui_lib, importc: "igShowStyleSelector".}
proc igShowUserGuide*(): void {.imgui_lib, importc: "igShowUserGuide".}
proc igSliderAngle*(label: cstring, v_rad: ptr float32, v_degrees_min: float32 = -360.0f, v_degrees_max: float32 = +360.0f, format: cstring = "%.0f deg"): bool {.imgui_lib, importc: "igSliderAngle".}
proc igSliderFloat*(label: cstring, v: ptr float32, v_min: float32, v_max: float32, format: cstring = "%.3f", power: float32 = 1.0f): bool {.imgui_lib, importc: "igSliderFloat".}
proc igSliderFloat2*(label: cstring, v: ptr float, v_min: float32, v_max: float32, format: cstring = "%.3f", power: float32 = 1.0f): bool {.imgui_lib, importc: "igSliderFloat2".}
proc igSliderFloat3*(label: cstring, v: ptr float, v_min: float32, v_max: float32, format: cstring = "%.3f", power: float32 = 1.0f): bool {.imgui_lib, importc: "igSliderFloat3".}
proc igSliderFloat4*(label: cstring, v: ptr float, v_min: float32, v_max: float32, format: cstring = "%.3f", power: float32 = 1.0f): bool {.imgui_lib, importc: "igSliderFloat4".}
proc igSliderInt*(label: cstring, v: ptr int32, v_min: int32, v_max: int32, format: cstring = "%d"): bool {.imgui_lib, importc: "igSliderInt".}
proc igSliderInt2*(label: cstring, v: ptr int, v_min: int32, v_max: int32, format: cstring = "%d"): bool {.imgui_lib, importc: "igSliderInt2".}
proc igSliderInt3*(label: cstring, v: ptr int, v_min: int32, v_max: int32, format: cstring = "%d"): bool {.imgui_lib, importc: "igSliderInt3".}
proc igSliderInt4*(label: cstring, v: ptr int, v_min: int32, v_max: int32, format: cstring = "%d"): bool {.imgui_lib, importc: "igSliderInt4".}
proc igSliderScalar*(label: cstring, data_type: ImGuiDataType, v: pointer, v_min: pointer, v_max: pointer, format: cstring = nil, power: float32 = 1.0f): bool {.imgui_lib, importc: "igSliderScalar".}
proc igSliderScalarN*(label: cstring, data_type: ImGuiDataType, v: pointer, components: int32, v_min: pointer, v_max: pointer, format: cstring = nil, power: float32 = 1.0f): bool {.imgui_lib, importc: "igSliderScalarN".}
proc igSmallButton*(label: cstring): bool {.imgui_lib, importc: "igSmallButton".}
proc igSpacing*(): void {.imgui_lib, importc: "igSpacing".}
proc igStyleColorsClassic*(dst: ptr ImGuiStyle = nil): void {.imgui_lib, importc: "igStyleColorsClassic".}
proc igStyleColorsDark*(dst: ptr ImGuiStyle = nil): void {.imgui_lib, importc: "igStyleColorsDark".}
proc igStyleColorsLight*(dst: ptr ImGuiStyle = nil): void {.imgui_lib, importc: "igStyleColorsLight".}
proc igText*(fmt: cstring): void {.imgui_lib, importc: "igText", varargs.}
proc igTextColored*(col: ImVec4, fmt: cstring): void {.imgui_lib, importc: "igTextColored", varargs.}
proc igTextColoredV*(col: ImVec4, fmt: cstring): void {.imgui_lib, importc: "igTextColoredV", varargs.}
proc igTextDisabled*(fmt: cstring): void {.imgui_lib, importc: "igTextDisabled", varargs.}
proc igTextDisabledV*(fmt: cstring): void {.imgui_lib, importc: "igTextDisabledV", varargs.}
proc igTextUnformatted*(text: cstring, text_end: cstring = nil): void {.imgui_lib, importc: "igTextUnformatted".}
proc igTextV*(fmt: cstring): void {.imgui_lib, importc: "igTextV", varargs.}
proc igTextWrapped*(fmt: cstring): void {.imgui_lib, importc: "igTextWrapped", varargs.}
proc igTextWrappedV*(fmt: cstring): void {.imgui_lib, importc: "igTextWrappedV", varargs.}
proc igTreeAdvanceToLabelPos*(): void {.imgui_lib, importc: "igTreeAdvanceToLabelPos".}
proc igTreeNode*(label: cstring): bool {.imgui_lib, importc: "igTreeNode".}
proc igTreeNodeEx*(label: cstring, flags: ImGuiTreeNodeFlags = 0): bool {.imgui_lib, importc: "igTreeNodeEx".}
proc igTreeNodeExV*(str_id: cstring, flags: ImGuiTreeNodeFlags, fmt: cstring): bool {.imgui_lib, importc: "igTreeNodeExV", varargs.}
proc igTreeNodeV*(str_id: cstring, fmt: cstring): bool {.imgui_lib, importc: "igTreeNodeV", varargs.}
proc igTreePop*(): void {.imgui_lib, importc: "igTreePop".}
proc igTreePush*(str_id: cstring): void {.imgui_lib, importc: "igTreePush".}
proc igUnindent*(indent_w: float32 = 0.0f): void {.imgui_lib, importc: "igUnindent".}
proc igVSliderFloat*(label: cstring, size: ImVec2, v: ptr float32, v_min: float32, v_max: float32, format: cstring = "%.3f", power: float32 = 1.0f): bool {.imgui_lib, importc: "igVSliderFloat".}
proc igVSliderInt*(label: cstring, size: ImVec2, v: ptr int32, v_min: int32, v_max: int32, format: cstring = "%d"): bool {.imgui_lib, importc: "igVSliderInt".}
proc igVSliderScalar*(label: cstring, size: ImVec2, data_type: ImGuiDataType, v: pointer, v_min: pointer, v_max: pointer, format: cstring = nil, power: float32 = 1.0f): bool {.imgui_lib, importc: "igVSliderScalar".}
proc igValue*(prefix: cstring, b: bool): void {.imgui_lib, importc: "igValue".}
